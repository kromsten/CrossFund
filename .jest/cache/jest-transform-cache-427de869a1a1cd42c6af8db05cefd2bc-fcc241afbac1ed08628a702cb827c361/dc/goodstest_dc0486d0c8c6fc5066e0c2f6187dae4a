3b261ecf2f708a05dc50175c749197a5
"use strict";

var _cosmos = require("../../helpers/cosmos");
var _common_localcosmosnet = require("../common_localcosmosnet");
var _goods = require("../../helpers/goods");
var _types = require("../../helpers/types");
var _wait = require("../../helpers/wait");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
describe('Neutron Hackaton Test', () => {
  var testState;
  var neutronChain;
  var neutronAccount, secondAccount;
  var accountAddress, secondAccountAddress;
  var contractAddress;
  var connectionId = 'connection-0';
  beforeAll( /*#__PURE__*/_asyncToGenerator(function* () {
    testState = new _common_localcosmosnet.TestStateLocalCosmosTestNet();
    yield testState.init();
    neutronChain = new _cosmos.CosmosWrapper(testState.sdk1, testState.blockWaiter1, _cosmos.NEUTRON_DENOM);
    neutronAccount = new _cosmos.WalletWrapper(neutronChain, testState.wallets.qaNeutron.genQaWal1);
    secondAccount = new _cosmos.WalletWrapper(neutronChain, testState.wallets.qaNeutronThree.genQaWal1);
    accountAddress = neutronAccount.wallet.address.toString();
    secondAccountAddress = secondAccount.wallet.address.toString();
  }));
  describe('deploying contract', () => {
    var codeId;
    test('store contract', /*#__PURE__*/_asyncToGenerator(function* () {
      codeId = yield neutronAccount.storeWasm(_types.NeutronContract.GOODS);
      expect(codeId).toBeGreaterThan(0);
    }));
    test('instantiate contract', /*#__PURE__*/_asyncToGenerator(function* () {
      contractAddress = (yield neutronAccount.instantiateContract(codeId, '{}', 'neutron_interchain_queries'))[0]._contract_address;
    }));
  });
  describe('submitting a proposal', () => {
    test('if can submit a proposal', /*#__PURE__*/_asyncToGenerator(function* () {
      var res = yield (0, _goods.createProposal)(neutronAccount, contractAddress);
      expect(res.code).toBe(0);
    }));
    test('if can query all proposal', /*#__PURE__*/_asyncToGenerator(function* () {
      var res = yield (0, _goods.queryProposals)(neutronChain, contractAddress);
      expect(res).toHaveProperty('proposals');
      expect(res.proposals.length).toBe(1);
      var proposal = res.proposals[0];
      expect(proposal.id).toBe(0);
      expect(proposal.title).toBe('test proposal');
      expect(proposal.description).toBe('test proposal description');
      expect(proposal.funding).toHaveLength(0);
    }));
    test('if can query proposal by id', /*#__PURE__*/_asyncToGenerator(function* () {
      var proposal = yield (0, _goods.queryProposalById)(neutronChain, contractAddress, 0);
      expect(proposal.id).toBe(0);
      expect(proposal.title).toBe('test proposal');
      expect(proposal.description).toBe('test proposal description');
      expect(proposal.funding).toHaveLength(0);
    }));
  });
  describe('funding a proposal', () => {
    test('if can sends funds', /*#__PURE__*/_asyncToGenerator(function* () {
      var res = yield (0, _goods.queryProposals)(neutronChain, contractAddress);
      var {
        id
      } = res.proposals[0];
      var fundsRes = yield (0, _goods.fundProposal)(neutronAccount, contractAddress, id, "1000000", _cosmos.NEUTRON_DENOM);
      expect(fundsRes.code).toBe(0);
    }));
    test('if can proposal now have funds', /*#__PURE__*/_asyncToGenerator(function* () {
      var proposal = yield (0, _goods.queryProposalById)(neutronChain, contractAddress, 0);
      expect(proposal.funding).toHaveLength(1);
      var [denom, value] = proposal.funding[0];
      expect(denom).toBe(_cosmos.NEUTRON_DENOM);
      expect(value.amount).toBe("1000000");
      expect(value.sender).toBe(accountAddress);
      expect(value.auto_agree).toBe(false);
      expect(value.native).toBe(true);
    }));
    test('if funds are in custody', /*#__PURE__*/_asyncToGenerator(function* () {
      var funds = yield (0, _goods.queryCustodyFunds)(neutronChain, contractAddress, neutronAccount.wallet.address.toString());
      expect(funds).toHaveLength(1);
      var [denom, fund] = funds[0];
      expect(denom).toBe(_cosmos.NEUTRON_DENOM);
      expect(fund.proposal_id).toBe(0);
      expect(fund.locked).toBe(false);
      expect(fund.amount).toBe("1000000");
      expect(fund.remote).toBeNull();
    }));
  });
  describe('submitting a application', () => {
    var currentHeight;
    test('if can submit a application', /*#__PURE__*/_asyncToGenerator(function* () {
      currentHeight = yield (0, _wait.getHeight)(neutronChain.sdk);
      var res = yield (0, _goods.submitApplication)(secondAccount, contractAddress, 0, [{
        recipient: secondAccountAddress,
        percent_share: 99
      }], [{
        recipient: accountAddress,
        percent_share: 1
      }], {
        at_height: currentHeight + 10
      });
      expect(res.code).toBe(0);
    }));
    test('if the proposal now have applications', /*#__PURE__*/_asyncToGenerator(function* () {
      var proposal = yield (0, _goods.queryProposalById)(neutronChain, contractAddress, 0);
      expect(proposal.applications).toHaveLength(1);
      var [sender, application] = proposal.applications[0];
      expect(sender).toBe(secondAccountAddress);
      expect(application.accepted).toBe(false);
      expect(application.applicants).toHaveLength(1);
      expect(application.applicants[0].recipient).toBe(secondAccountAddress);
      expect(application.auditors).toHaveLength(1);
      expect(application.auditors[0].recipient).toBe(accountAddress);
      expect(application.verifications).toHaveLength(0);
      expect(application.deliver_by).toHaveProperty("at_height");
      expect(application.deliver_by.at_height).toBe(currentHeight + 10);
    }));
  });
  describe("approving an application", () => {
    test('if can send approval message', /*#__PURE__*/_asyncToGenerator(function* () {
      var proposal = yield (0, _goods.queryProposalById)(neutronChain, contractAddress, 0);
      var [sender, _] = proposal.applications[0];
      var res = yield (0, _goods.approveApplication)(neutronAccount, contractAddress, 0, sender);
      expect(res.code).toBe(0);
    }));
    test('if the funds are locked now', /*#__PURE__*/_asyncToGenerator(function* () {
      var funds = yield (0, _goods.queryCustodyFunds)(neutronChain, contractAddress, neutronAccount.wallet.address.toString());
      var first = funds[0];
      expect(first[1].locked).toBe(true);
    }));
    test('if locked funds skipping work', /*#__PURE__*/_asyncToGenerator(function* () {
      var funds = yield (0, _goods.queryCustodyFunds)(neutronChain, contractAddress, neutronAccount.wallet.address.toString(), true);
      expect(funds).toHaveLength(0);
    }));
  });
  describe('accepting bounty', () => {
    test('if can accept bounty', /*#__PURE__*/_asyncToGenerator(function* () {
      var proposal = yield (0, _goods.queryProposalById)(neutronChain, contractAddress, 0);
      var [sender, _] = proposal.applications[0];
      var res = yield (0, _goods.acceptApplication)(secondAccount, contractAddress, 0, sender);
      expect(res.code).toBe(0);
    }));
    test('if the application is now accepted', /*#__PURE__*/_asyncToGenerator(function* () {
      var proposal = yield (0, _goods.queryProposalById)(neutronChain, contractAddress, 0);
      var [_, application] = proposal.applications[0];
      expect(application.accepted).toBe(true);
    }));
  });
  describe('verifying bounty', () => {
    test('if can verify bounty', /*#__PURE__*/_asyncToGenerator(function* () {
      var proposal = yield (0, _goods.queryProposalById)(neutronChain, contractAddress, 0);
      var [sender, _] = proposal.applications[0];
      var res = yield (0, _goods.verifyApplication)(neutronAccount, contractAddress, 0, sender);
      expect(res.code).toBe(0);
    }));
    test('if the application is now verified', /*#__PURE__*/_asyncToGenerator(function* () {
      var proposal = yield (0, _goods.queryProposalById)(neutronChain, contractAddress, 0);
      var [_, application] = proposal.applications[0];
      expect(application.verifications).toHaveLength(1);
      expect(application.verifications[0]).toBe(accountAddress);
    }));
    test('if the funds are now unlocked', /*#__PURE__*/_asyncToGenerator(function* () {
      var funder_auditor = yield (0, _goods.queryCustodyFunds)(neutronChain, contractAddress, accountAddress);
      var hacker = yield (0, _goods.queryCustodyFunds)(neutronChain, contractAddress, secondAccountAddress);
      expect(funder_auditor[0][1].locked).toBe(false);
      expect(funder_auditor[0][1].amount).toBe('10000');
      expect(hacker[0][1].locked).toBe(false);
      expect(hacker[0][1].amount).toBe('990000');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,