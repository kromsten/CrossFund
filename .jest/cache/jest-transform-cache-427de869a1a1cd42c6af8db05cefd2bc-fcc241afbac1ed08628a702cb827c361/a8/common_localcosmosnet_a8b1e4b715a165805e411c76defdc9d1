af68e65b3eba4941afb8fb8218625feb
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.disconnectValidator = exports.TestStateLocalCosmosTestNet = void 0;
var _child_process = require("child_process");
var _core = require("@cosmos-client/core");
var _cosmos = require("../helpers/cosmos");
var _wait = require("../helpers/wait");
var _bip = require("bip39");
var _long = _interopRequireDefault(require("long"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var config = require('../config.json');
var disconnectValidator = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (name) {
    var {
      stdout
    } = yield (0, _child_process.exec)("docker stop ".concat(name));
    return stdout;
  });
  return function disconnectValidator(_x) {
    return _ref.apply(this, arguments);
  };
}();
exports.disconnectValidator = disconnectValidator;
var walletSet = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator(function* (sdk, prefix) {
    return {
      val1: yield (0, _cosmos.mnemonicToWallet)(_core.cosmosclient.ValAddress, sdk, config.VAL_MNEMONIC_1, prefix),
      demo1: yield (0, _cosmos.mnemonicToWallet)(_core.cosmosclient.AccAddress, sdk, config.DEMO_MNEMONIC_1, prefix),
      demo2: yield (0, _cosmos.mnemonicToWallet)(_core.cosmosclient.AccAddress, sdk, config.DEMO_MNEMONIC_2, prefix),
      icq: yield (0, _cosmos.mnemonicToWallet)(_core.cosmosclient.AccAddress, sdk, config.DEMO_MNEMONIC_3, prefix),
      rly1: yield (0, _cosmos.mnemonicToWallet)(_core.cosmosclient.AccAddress, sdk, config.RLY_MNEMONIC_1, prefix),
      rly2: yield (0, _cosmos.mnemonicToWallet)(_core.cosmosclient.AccAddress, sdk, config.RLY_MNEMONIC_2, prefix)
    };
  });
  return function walletSet(_x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();
class TestStateLocalCosmosTestNet {
  constructor() {
    _defineProperty(this, "sendTokensWithRetry", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator(function* (cm, to, amount) {
        var denom = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : cm.chain.denom;
        var retryCount = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 100;
        var fee = {
          gas_limit: _long.default.fromString('200000'),
          amount: [{
            denom: cm.chain.denom,
            amount: '1000'
          }]
        };
        var attemptCount = 0;
        var res;
        while (retryCount > attemptCount) {
          try {
            var sequence = yield cm.chain.getSeq(cm.wallet.address);
            res = yield cm.msgSend(to.toString(), {
              amount,
              denom
            }, fee, sequence, _core.rest.tx.BroadcastTxMode.Block);
            break;
          } catch (e) {
            yield cm.chain.blockWaiter.waitBlocks(1);
            attemptCount++;
          }
        }
        if (!res) {
          throw new Error("Failed to send tokens after ".concat(retryCount, " retries."));
        }
      });
      return function (_x4, _x5, _x6) {
        return _ref3.apply(this, arguments);
      };
    }());
  }
  init() {
    var _this = this;
    return _asyncToGenerator(function* () {
      var neutronPrefix = process.env.NEUTRON_ADDRESS_PREFIX || 'neutron';
      var cosmosPrefix = process.env.COSMOS_ADDRESS_PREFIX || 'cosmos';
      var host1 = process.env.NODE1_URL || 'http://localhost:1317';
      var host2 = process.env.NODE2_URL || 'http://localhost:1316';
      _this.sdk1 = new _core.cosmosclient.CosmosSDK(host1, config.CHAIN_ID_1);
      _this.sdk2 = new _core.cosmosclient.CosmosSDK(host2, config.CHAIN_ID_2);
      _this.icq_web_host = 'http://localhost:9999';
      _this.blockWaiter1 = new _wait.BlockWaiter(process.env.NODE1_WS_URL || 'ws://localhost:26657');
      _this.blockWaiter2 = new _wait.BlockWaiter(process.env.NODE2_WS_URL || 'ws://localhost:16657');
      _this.wallets = {};
      var neutron = yield walletSet(_this.sdk1, neutronPrefix);
      var cosmos = yield walletSet(_this.sdk2, cosmosPrefix);
      var qaNeutron = yield _this.createQaWallet(neutronPrefix, _this.sdk1, _this.blockWaiter1, neutron.demo1, _cosmos.NEUTRON_DENOM, [{
        denom: _cosmos.NEUTRON_DENOM,
        amount: '11500000000'
      }, {
        denom: _cosmos.IBC_ATOM_DENOM,
        amount: '11500000000'
      }, {
        denom: _cosmos.IBC_USDC_DENOM,
        amount: '11500000000'
      }]);
      var qaNeutronThree = yield _this.createQaWallet(neutronPrefix, _this.sdk1, _this.blockWaiter1, neutron.demo1, _cosmos.NEUTRON_DENOM);
      var qaNeutronFour = yield _this.createQaWallet(neutronPrefix, _this.sdk1, _this.blockWaiter1, neutron.demo1, _cosmos.NEUTRON_DENOM);
      var qaNeutronFive = yield _this.createQaWallet(neutronPrefix, _this.sdk1, _this.blockWaiter1, neutron.demo1, _cosmos.NEUTRON_DENOM);
      var qaCosmos = yield _this.createQaWallet(cosmosPrefix, _this.sdk2, _this.blockWaiter2, cosmos.demo2, _cosmos.COSMOS_DENOM);
      var qaCosmosTwo = yield _this.createQaWallet(cosmosPrefix, _this.sdk2, _this.blockWaiter2, cosmos.demo2, _cosmos.COSMOS_DENOM);
      _this.wallets = {
        cosmos,
        neutron,
        qaNeutron,
        qaCosmos,
        qaCosmosTwo,
        qaNeutronThree,
        qaNeutronFour,
        qaNeutronFive
      };
      return _this.wallets;
    })();
  }
  createQaWallet(prefix, sdk, blockWaiter, wallet, denom) {
    var _arguments = arguments,
      _this2 = this;
    return _asyncToGenerator(function* () {
      var balances = _arguments.length > 5 && _arguments[5] !== undefined ? _arguments[5] : [];
      if (balances.length === 0) {
        balances = [{
          denom,
          amount: '11500000000'
        }];
      }
      var cm = new _cosmos.WalletWrapper(new _cosmos.CosmosWrapper(sdk, blockWaiter, denom), wallet);
      var mnemonic = (0, _bip.generateMnemonic)();
      var newWallet = yield (0, _cosmos.mnemonicToWallet)(_core.cosmosclient.AccAddress, sdk, mnemonic, prefix, false);
      for (var balance of balances) {
        yield _this2.sendTokensWithRetry(cm, newWallet.address, balance.amount, balance.denom);
      }
      var wal = yield (0, _cosmos.mnemonicToWallet)(_core.cosmosclient.AccAddress, sdk, mnemonic, prefix);
      return {
        genQaWal1: wal
      };
    })();
  }
}
exports.TestStateLocalCosmosTestNet = TestStateLocalCosmosTestNet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,