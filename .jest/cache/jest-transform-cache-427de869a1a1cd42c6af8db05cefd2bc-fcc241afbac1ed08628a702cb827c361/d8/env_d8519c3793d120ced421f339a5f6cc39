753e3423673e0b60645bcc80cbf652eb
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.waitForChannel = exports.showVersions = exports.setup = exports.getContractsHashes = exports.getContractBinary = void 0;
var _axios = _interopRequireDefault(require("axios"));
var _child_process = require("child_process");
var _types = require("./types");
var _wait = require("./wait");
var _fs = require("fs");
var _path = _interopRequireDefault(require("path"));
var _crypto = _interopRequireDefault(require("crypto"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var CONTRACTS_PATH = process.env.CONTRACTS_PATH || './contracts';
var BLOCKS_COUNT_BEFORE_START = process.env.BLOCKS_COUNT_BEFORE_START ? parseInt(process.env.BLOCKS_COUNT_BEFORE_START, 10) : 10;
var alreadySetUp = false;
var getContractBinary = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (fileName) {
    return _fs.promises.readFile(_path.default.resolve(CONTRACTS_PATH, fileName));
  });
  return function getContractBinary(_x) {
    return _ref.apply(this, arguments);
  };
}();
exports.getContractBinary = getContractBinary;
var getContractsHashes = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator(function* () {
    var hashes = {};
    for (var key of Object.keys(_types.NeutronContract)) {
      var binary = yield getContractBinary(_types.NeutronContract[key]);
      hashes[_types.NeutronContract[key]] = _crypto.default.createHash('sha256').update(binary).digest('hex');
    }
    return hashes;
  });
  return function getContractsHashes() {
    return _ref2.apply(this, arguments);
  };
}();
exports.getContractsHashes = getContractsHashes;
var setup = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator(function* (host1, host2) {
    if (alreadySetUp) {
      console.log('already set up');
      return;
    }
    if (process.env.NO_DOCKER) {
      console.log('NO_DOCKER ENV provided');
      return;
    }
    try {
      (0, _child_process.execSync)("cd setup && make stop-cosmopark");
      // eslint-disable-next-line no-empty
    } catch (e) {}
    console.log('Starting container... it may take long');
    if (process.env.NO_REBUILD) {
      console.log('NO_REBUILD ENV provided. do not rebuild docker images');
      (0, _child_process.execSync)("cd setup && make start-cosmopark-no-rebuild");
    } else {
      (0, _child_process.execSync)("cd setup && make start-cosmopark");
    }
    showVersions();
    yield showContractsHashes();
    yield waitForHTTP(host1);
    !process.env.NO_WAIT_CHANNEL1 && (yield waitForChannel(host1));
    !process.env.NO_WAIT_HTTP2 && (yield waitForHTTP(host2));
    !process.env.NO_WAIT_CHANNEL2 && (yield waitForChannel(host2));
    !process.env.NO_WAIT_DELAY && (yield (0, _wait.wait)(20)); // FIXME: this hardcoded sleep is here to wait until hermes is fully initialized.
    //                        proper fix would be to monitor hermes status events.
    alreadySetUp = true;
  });
  return function setup(_x2, _x3) {
    return _ref3.apply(this, arguments);
  };
}();
exports.setup = setup;
var waitForHTTP = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator(function* () {
    var host = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'http://127.0.0.1:1317';
    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "blocks/".concat(BLOCKS_COUNT_BEFORE_START);
    var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 280000;
    var start = Date.now();
    while (Date.now() < start + timeout) {
      try {
        var r = yield _axios.default.get("".concat(host, "/").concat(path), {
          timeout: 1000
        });
        if (r.status === 200) {
          return;
        }
        // eslint-disable-next-line no-empty
      } catch (e) {}
      yield (0, _wait.wait)(1);
    }
    throw new Error('No port opened');
  });
  return function waitForHTTP() {
    return _ref4.apply(this, arguments);
  };
}();
var waitForChannel = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator(function* () {
    var host = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'http://127.0.0.1:1317';
    var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000;
    var start = Date.now();
    while (Date.now() < start + timeout) {
      try {
        var r = yield _axios.default.get("".concat(host, "/ibc/core/channel/v1/channels"), {
          timeout: 1000
        });
        if (r.data.channels.length > 0 && r.data.channels.every(channel => channel.counterparty.channel_id !== '')) {
          yield (0, _wait.wait)(20);
          return;
        }
        // eslint-disable-next-line no-empty
      } catch (e) {}
      yield (0, _wait.wait)(1);
    }
    throw new Error('No channel opened');
  });
  return function waitForChannel() {
    return _ref5.apply(this, arguments);
  };
}();
exports.waitForChannel = waitForChannel;
var showVersions = () => {
  if (process.env.NO_DOCKER) {
    console.log('Cannot get versions since NO_DOCKER ENV provided');
    return;
  }
  var servicesAndGetVersionCommandsText = [['ICQ relayer', 'cd setup && docker compose exec relayer neutron_query_relayer version'], ['hermes', 'cd setup && docker compose exec hermes hermes version'], ['Integration tests', "git log -1 --format='%H'"]];
  for (var service of servicesAndGetVersionCommandsText) {
    try {
      var version = (0, _child_process.execSync)(service[1]).toString().trim();
      console.log("".concat(service[0], " version:\n").concat(version));
    } catch (err) {
      console.log("Cannot get ".concat(service[0], " version:\n").concat(err));
    }
  }
  var servicesAndGetVersionCommandsJson = [['neutrond', 'cd setup && docker compose exec neutron-node /go/bin/neutrond version --long -o json'], ['gaiad', 'cd setup && docker compose exec gaia-node gaiad version --long 2>&1 -o json']];
  for (var _service of servicesAndGetVersionCommandsJson) {
    try {
      var versionLong = JSON.parse((0, _child_process.execSync)(_service[1]).toString().trim());
      console.log("".concat(_service[0], " version:\nversion: ").concat(versionLong['version'], "\ncommit: ").concat(versionLong['commit']));
    } catch (err) {
      console.log("Cannot get ".concat(_service[0], " version:\n").concat(err));
    }
  }
};
exports.showVersions = showVersions;
var showContractsHashes = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator(function* () {
    var hashes = yield getContractsHashes();
    var result = 'Contracts hashes:\n';
    for (var key of Object.keys(hashes)) {
      result = result.concat("".concat(hashes[key], " ").concat(key, "\n"));
    }
    console.log(result);
  });
  return function showContractsHashes() {
    return _ref6.apply(this, arguments);
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,