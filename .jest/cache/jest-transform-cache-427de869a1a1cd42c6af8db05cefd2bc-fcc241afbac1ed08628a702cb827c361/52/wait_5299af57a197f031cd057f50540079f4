3fbaa91f266b5c9ca81ff87a872add58
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wait = exports.getWithAttempts = exports.getHeight = exports.BlockWaiter = void 0;
var _core = require("@cosmos-client/core");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
global.WebSocket = require('ws');
var wait = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (seconds) {
    return new Promise(r => {
      setTimeout(() => r(true), 1000 * seconds);
    });
  });
  return function wait(_x) {
    return _ref.apply(this, arguments);
  };
}();
exports.wait = wait;
var getHeight = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator(function* (sdk) {
    var block = yield _core.rest.tendermint.getLatestBlock(sdk);
    return +block.data.block.header.height;
  });
  return function getHeight(_x2) {
    return _ref2.apply(this, arguments);
  };
}();
exports.getHeight = getHeight;
class BlockWaiter {
  constructor(url) {
    this.url = url;
  }
  waitBlocks(n) {
    var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 120000;
    return new Promise((resolve, reject) => {
      var ws = null;
      var x = setTimeout(() => {
        if (ws != null) {
          ws.unsubscribe();
        }
        reject(new Error('waitBlocks: timeout'));
      }, timeout);
      ws = _core.websocket.connect(this.url);
      ws.next({
        id: '1',
        jsonrpc: '2.0',
        method: 'subscribe',
        params: ["tm.event='NewBlock'"]
      });
      ws.subscribe(res => {
        if (Object.entries(res.result).length !== 0) {
          n--;
          if (n == 0) {
            ws.unsubscribe();
            clearTimeout(x);
            resolve();
          }
        }
      });
    });
  }
}

/**
 * getWithAttempts waits until readyFunc(getFunc()) returns true
 * and only then returns result of getFunc()
 */
exports.BlockWaiter = BlockWaiter;
var getWithAttempts = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator(function* (blockWaiter, getFunc, readyFunc) {
    var numAttempts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 20;
    var error = null;
    var data;
    while (numAttempts > 0) {
      numAttempts--;
      try {
        data = yield getFunc();
        if (yield readyFunc(data)) {
          return data;
        }
      } catch (e) {
        error = e;
      }
      yield blockWaiter.waitBlocks(1);
    }
    throw error != null ? error : new Error('getWithAttempts: no attempts left. Latest get response: ' + (data === Object(data) ? JSON.stringify(data) : data).toString());
  });
  return function getWithAttempts(_x3, _x4, _x5) {
    return _ref3.apply(this, arguments);
  };
}();
exports.getWithAttempts = getWithAttempts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29yZSIsInJlcXVpcmUiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJyZXNvbHZlIiwicmVqZWN0IiwiX25leHQiLCJfdGhyb3ciLCJrZXkiLCJhcmciLCJpbmZvIiwidmFsdWUiLCJlcnJvciIsImRvbmUiLCJQcm9taXNlIiwidGhlbiIsIl9hc3luY1RvR2VuZXJhdG9yIiwiZm4iLCJzZWxmIiwiYXJncyIsImFyZ3VtZW50cyIsImFwcGx5IiwiZXJyIiwidW5kZWZpbmVkIiwiZ2xvYmFsIiwiV2ViU29ja2V0Iiwid2FpdCIsIl9yZWYiLCJzZWNvbmRzIiwiciIsInNldFRpbWVvdXQiLCJfeCIsImV4cG9ydHMiLCJnZXRIZWlnaHQiLCJfcmVmMiIsInNkayIsImJsb2NrIiwicmVzdCIsInRlbmRlcm1pbnQiLCJnZXRMYXRlc3RCbG9jayIsImRhdGEiLCJoZWFkZXIiLCJoZWlnaHQiLCJfeDIiLCJCbG9ja1dhaXRlciIsImNvbnN0cnVjdG9yIiwidXJsIiwid2FpdEJsb2NrcyIsIm4iLCJ0aW1lb3V0IiwibGVuZ3RoIiwid3MiLCJ4IiwidW5zdWJzY3JpYmUiLCJFcnJvciIsIndlYnNvY2tldCIsImNvbm5lY3QiLCJuZXh0IiwiaWQiLCJqc29ucnBjIiwibWV0aG9kIiwicGFyYW1zIiwic3Vic2NyaWJlIiwicmVzIiwiT2JqZWN0IiwiZW50cmllcyIsInJlc3VsdCIsImNsZWFyVGltZW91dCIsImdldFdpdGhBdHRlbXB0cyIsIl9yZWYzIiwiYmxvY2tXYWl0ZXIiLCJnZXRGdW5jIiwicmVhZHlGdW5jIiwibnVtQXR0ZW1wdHMiLCJlIiwiSlNPTiIsInN0cmluZ2lmeSIsInRvU3RyaW5nIiwiX3gzIiwiX3g0IiwiX3g1Il0sInNvdXJjZXMiOlsid2FpdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXN0LCB3ZWJzb2NrZXQgfSBmcm9tICdAY29zbW9zLWNsaWVudC9jb3JlJztcbmltcG9ydCB7IENvc21vc1NESyB9IGZyb20gJ0Bjb3Ntb3MtY2xpZW50L2NvcmUvY2pzL3Nkayc7XG5cbmdsb2JhbC5XZWJTb2NrZXQgPSByZXF1aXJlKCd3cycpO1xuXG5leHBvcnQgY29uc3Qgd2FpdCA9IGFzeW5jIChzZWNvbmRzOiBudW1iZXIpID0+XG4gIG5ldyBQcm9taXNlKChyKSA9PiB7XG4gICAgc2V0VGltZW91dCgoKSA9PiByKHRydWUpLCAxMDAwICogc2Vjb25kcyk7XG4gIH0pO1xuXG5leHBvcnQgY29uc3QgZ2V0SGVpZ2h0ID0gYXN5bmMgKHNkazogQ29zbW9zU0RLKSA9PiB7XG4gIGNvbnN0IGJsb2NrID0gYXdhaXQgcmVzdC50ZW5kZXJtaW50LmdldExhdGVzdEJsb2NrKHNkayk7XG4gIHJldHVybiArYmxvY2suZGF0YS5ibG9jay5oZWFkZXIuaGVpZ2h0O1xufTtcblxuZXhwb3J0IGNsYXNzIEJsb2NrV2FpdGVyIHtcbiAgdXJsOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IodXJsOiBzdHJpbmcpIHtcbiAgICB0aGlzLnVybCA9IHVybDtcbiAgfVxuXG4gIHdhaXRCbG9ja3MobjogbnVtYmVyLCB0aW1lb3V0ID0gMTIwMDAwKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxldCB3cyA9IG51bGw7XG4gICAgICBjb25zdCB4ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICh3cyAhPSBudWxsKSB7XG4gICAgICAgICAgd3MudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QobmV3IEVycm9yKCd3YWl0QmxvY2tzOiB0aW1lb3V0JykpO1xuICAgICAgfSwgdGltZW91dCk7XG4gICAgICB3cyA9IHdlYnNvY2tldC5jb25uZWN0KHRoaXMudXJsKTtcbiAgICAgIHdzLm5leHQoe1xuICAgICAgICBpZDogJzEnLFxuICAgICAgICBqc29ucnBjOiAnMi4wJyxcbiAgICAgICAgbWV0aG9kOiAnc3Vic2NyaWJlJyxcbiAgICAgICAgcGFyYW1zOiBbXCJ0bS5ldmVudD0nTmV3QmxvY2snXCJdLFxuICAgICAgfSk7XG4gICAgICB3cy5zdWJzY3JpYmUoKHJlczogd2Vic29ja2V0LlJlc3BvbnNlU2NoZW1hKSA9PiB7XG4gICAgICAgIGlmIChPYmplY3QuZW50cmllcyhyZXMucmVzdWx0KS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICBuLS07XG4gICAgICAgICAgaWYgKG4gPT0gMCkge1xuICAgICAgICAgICAgd3MudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh4KTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogZ2V0V2l0aEF0dGVtcHRzIHdhaXRzIHVudGlsIHJlYWR5RnVuYyhnZXRGdW5jKCkpIHJldHVybnMgdHJ1ZVxuICogYW5kIG9ubHkgdGhlbiByZXR1cm5zIHJlc3VsdCBvZiBnZXRGdW5jKClcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFdpdGhBdHRlbXB0cyA9IGFzeW5jIDxUPihcbiAgYmxvY2tXYWl0ZXI6IEJsb2NrV2FpdGVyLFxuICBnZXRGdW5jOiAoKSA9PiBQcm9taXNlPFQ+LFxuICByZWFkeUZ1bmM6ICh0OiBUKSA9PiBQcm9taXNlPGJvb2xlYW4+LFxuICBudW1BdHRlbXB0cyA9IDIwLFxuKTogUHJvbWlzZTxUPiA9PiB7XG4gIGxldCBlcnJvciA9IG51bGw7XG4gIGxldCBkYXRhOiBUO1xuICB3aGlsZSAobnVtQXR0ZW1wdHMgPiAwKSB7XG4gICAgbnVtQXR0ZW1wdHMtLTtcbiAgICB0cnkge1xuICAgICAgZGF0YSA9IGF3YWl0IGdldEZ1bmMoKTtcbiAgICAgIGlmIChhd2FpdCByZWFkeUZ1bmMoZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZXJyb3IgPSBlO1xuICAgIH1cbiAgICBhd2FpdCBibG9ja1dhaXRlci53YWl0QmxvY2tzKDEpO1xuICB9XG4gIHRocm93IGVycm9yICE9IG51bGxcbiAgICA/IGVycm9yXG4gICAgOiBuZXcgRXJyb3IoXG4gICAgICAgICdnZXRXaXRoQXR0ZW1wdHM6IG5vIGF0dGVtcHRzIGxlZnQuIExhdGVzdCBnZXQgcmVzcG9uc2U6ICcgK1xuICAgICAgICAgIChkYXRhID09PSBPYmplY3QoZGF0YSkgPyBKU09OLnN0cmluZ2lmeShkYXRhKSA6IGRhdGEpLnRvU3RyaW5nKCksXG4gICAgICApO1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsS0FBQSxHQUFBQyxPQUFBO0FBQXNELFNBQUFDLG1CQUFBQyxHQUFBLEVBQUFDLE9BQUEsRUFBQUMsTUFBQSxFQUFBQyxLQUFBLEVBQUFDLE1BQUEsRUFBQUMsR0FBQSxFQUFBQyxHQUFBLGNBQUFDLElBQUEsR0FBQVAsR0FBQSxDQUFBSyxHQUFBLEVBQUFDLEdBQUEsT0FBQUUsS0FBQSxHQUFBRCxJQUFBLENBQUFDLEtBQUEsV0FBQUMsS0FBQSxJQUFBUCxNQUFBLENBQUFPLEtBQUEsaUJBQUFGLElBQUEsQ0FBQUcsSUFBQSxJQUFBVCxPQUFBLENBQUFPLEtBQUEsWUFBQUcsT0FBQSxDQUFBVixPQUFBLENBQUFPLEtBQUEsRUFBQUksSUFBQSxDQUFBVCxLQUFBLEVBQUFDLE1BQUE7QUFBQSxTQUFBUyxrQkFBQUMsRUFBQSw2QkFBQUMsSUFBQSxTQUFBQyxJQUFBLEdBQUFDLFNBQUEsYUFBQU4sT0FBQSxXQUFBVixPQUFBLEVBQUFDLE1BQUEsUUFBQUYsR0FBQSxHQUFBYyxFQUFBLENBQUFJLEtBQUEsQ0FBQUgsSUFBQSxFQUFBQyxJQUFBLFlBQUFiLE1BQUFLLEtBQUEsSUFBQVQsa0JBQUEsQ0FBQUMsR0FBQSxFQUFBQyxPQUFBLEVBQUFDLE1BQUEsRUFBQUMsS0FBQSxFQUFBQyxNQUFBLFVBQUFJLEtBQUEsY0FBQUosT0FBQWUsR0FBQSxJQUFBcEIsa0JBQUEsQ0FBQUMsR0FBQSxFQUFBQyxPQUFBLEVB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