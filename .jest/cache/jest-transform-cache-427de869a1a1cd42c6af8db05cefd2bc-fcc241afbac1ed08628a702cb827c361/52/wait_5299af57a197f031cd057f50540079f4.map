{"version":3,"names":["_core","require","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","global","WebSocket","wait","_ref","seconds","r","setTimeout","_x","exports","getHeight","_ref2","sdk","block","rest","tendermint","getLatestBlock","data","header","height","_x2","BlockWaiter","constructor","url","waitBlocks","n","timeout","length","ws","x","unsubscribe","Error","websocket","connect","next","id","jsonrpc","method","params","subscribe","res","Object","entries","result","clearTimeout","getWithAttempts","_ref3","blockWaiter","getFunc","readyFunc","numAttempts","e","JSON","stringify","toString","_x3","_x4","_x5"],"sources":["wait.ts"],"sourcesContent":["import { rest, websocket } from '@cosmos-client/core';\nimport { CosmosSDK } from '@cosmos-client/core/cjs/sdk';\n\nglobal.WebSocket = require('ws');\n\nexport const wait = async (seconds: number) =>\n  new Promise((r) => {\n    setTimeout(() => r(true), 1000 * seconds);\n  });\n\nexport const getHeight = async (sdk: CosmosSDK) => {\n  const block = await rest.tendermint.getLatestBlock(sdk);\n  return +block.data.block.header.height;\n};\n\nexport class BlockWaiter {\n  url: string;\n\n  constructor(url: string) {\n    this.url = url;\n  }\n\n  waitBlocks(n: number, timeout = 120000): Promise<void> {\n    return new Promise((resolve, reject) => {\n      let ws = null;\n      const x = setTimeout(() => {\n        if (ws != null) {\n          ws.unsubscribe();\n        }\n        reject(new Error('waitBlocks: timeout'));\n      }, timeout);\n      ws = websocket.connect(this.url);\n      ws.next({\n        id: '1',\n        jsonrpc: '2.0',\n        method: 'subscribe',\n        params: [\"tm.event='NewBlock'\"],\n      });\n      ws.subscribe((res: websocket.ResponseSchema) => {\n        if (Object.entries(res.result).length !== 0) {\n          n--;\n          if (n == 0) {\n            ws.unsubscribe();\n            clearTimeout(x);\n            resolve();\n          }\n        }\n      });\n    });\n  }\n}\n\n/**\n * getWithAttempts waits until readyFunc(getFunc()) returns true\n * and only then returns result of getFunc()\n */\nexport const getWithAttempts = async <T>(\n  blockWaiter: BlockWaiter,\n  getFunc: () => Promise<T>,\n  readyFunc: (t: T) => Promise<boolean>,\n  numAttempts = 20,\n): Promise<T> => {\n  let error = null;\n  let data: T;\n  while (numAttempts > 0) {\n    numAttempts--;\n    try {\n      data = await getFunc();\n      if (await readyFunc(data)) {\n        return data;\n      }\n    } catch (e) {\n      error = e;\n    }\n    await blockWaiter.waitBlocks(1);\n  }\n  throw error != null\n    ? error\n    : new Error(\n        'getWithAttempts: no attempts left. Latest get response: ' +\n          (data === Object(data) ? JSON.stringify(data) : data).toString(),\n      );\n};\n"],"mappings":"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"}