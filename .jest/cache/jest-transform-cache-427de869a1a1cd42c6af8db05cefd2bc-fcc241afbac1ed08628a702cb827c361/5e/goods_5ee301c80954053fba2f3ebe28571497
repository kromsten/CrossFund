5e7083b41edf019afe091ea638a397a6
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.verifyApplication = exports.submitApplication = exports.registerICA = exports.queryProposals = exports.queryProposalById = exports.queryICA = exports.queryCustodyFunds = exports.fundProposal = exports.createProposal = exports.approveApplication = exports.acceptApplication = void 0;
var _wait = require("./wait");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var createProposal = (cm, contractAddress, title, description) => {
  return cm.executeContract(contractAddress, JSON.stringify({
    submit_proposal: {
      title: title !== null && title !== void 0 ? title : 'test proposal',
      description: description !== null && description !== void 0 ? description : 'test proposal description'
    }
  }));
};
exports.createProposal = createProposal;
var fundProposal = (cm, contractAddress, proposal_id, amount, denom, auto_agree) => {
  return cm.executeContract(contractAddress, JSON.stringify({
    fund_proposal: {
      proposal_id,
      auto_agree
    }
  }), [{
    amount,
    denom
  }]);
};
exports.fundProposal = fundProposal;
var submitApplication = (cm, contractAddress, proposal_id, applicants, auditors, deliver_by) => {
  return cm.executeContract(contractAddress, JSON.stringify({
    submit_application: {
      proposal_id,
      application: {
        applicants,
        auditors,
        deliver_by
      }
    }
  }));
};
exports.submitApplication = submitApplication;
var acceptApplication = (cm, contractAddress, proposal_id, application_sender) => {
  return cm.executeContract(contractAddress, JSON.stringify({
    accept_application: {
      proposal_id,
      application_sender
    }
  }));
};
exports.acceptApplication = acceptApplication;
var approveApplication = (cm, contractAddress, proposal_id, application_sender) => {
  return cm.executeContract(contractAddress, JSON.stringify({
    approve_application: {
      proposal_id,
      application_sender
    }
  }));
};
exports.approveApplication = approveApplication;
var registerICA = (cm, contractAddress, proposal_id, connection_id) => {
  return cm.executeContract(contractAddress, JSON.stringify({
    "register_i_c_a": {
      proposal_id,
      connection_id
    }
  }));
};
exports.registerICA = registerICA;
var verifyApplication = (cm, contractAddress, proposal_id, application_sender) => {
  return cm.executeContract(contractAddress, JSON.stringify({
    verify_application: {
      proposal_id,
      application_sender
    }
  }));
};
exports.verifyApplication = verifyApplication;
var queryProposals = (cm, contractAddress) => {
  return cm.queryContract(contractAddress, {
    all_proposals: {}
  });
};
exports.queryProposals = queryProposals;
var queryProposalById = (cm, contractAddress, proposal_id) => cm.queryContract(contractAddress, {
  proposal: {
    proposal_id
  }
});
exports.queryProposalById = queryProposalById;
var queryCustodyFunds = (cm, contractAddress, address, skip_locked) => {
  return cm.queryContract(contractAddress, {
    address_funds: {
      address,
      skip_locked
    }
  });
};
exports.queryCustodyFunds = queryCustodyFunds;
var queryICA = function queryICA(cm, contractAddress, proposal_id, connection_id) {
  var numAttempts = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 20;
  return (0, _wait.getWithAttempts)(cm.blockWaiter, () => cm.queryContract(contractAddress, {
    interchain_account_address: {
      proposal_id,
      connection_id
    }
  }), /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* (response) {
      return response != null;
    });
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }(), numAttempts);
};
exports.queryICA = queryICA;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,