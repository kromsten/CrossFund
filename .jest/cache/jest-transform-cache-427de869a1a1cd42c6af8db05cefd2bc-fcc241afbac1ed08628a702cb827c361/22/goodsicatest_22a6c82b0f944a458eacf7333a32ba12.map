{"version":3,"names":["_cosmos","require","_common_localcosmosnet","_goods","_types","_wait","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","describe","testState","neutronChain","gaiaChain","neutronAccount","gaiaAccount","accountAddress","contractAddress","icaAddress","connectionId","beforeAll","TestStateLocalCosmosTestNet","init","CosmosWrapper","sdk1","blockWaiter1","NEUTRON_DENOM","WalletWrapper","wallets","qaNeutron","genQaWal1","sdk2","blockWaiter2","COSMOS_DENOM","qaCosmos","wallet","address","toString","codeId","test","storeWasm","NeutronContract","GOODS","expect","toBeGreaterThan","instantiateContract","_contract_address","createProposal","res","registerICA","console","log","code","toBe","channels","getWithAttempts","blockWaiter","listIBCChannels","_ref6","length","_x","proposal_id","Array","isArray","toIncludeAllPartialMembers","port_id","concat","ica","queryICA","interchain_account_address","toContain","toEqual","msgSend","amount","denom","balance","queryCustodyFunds","proposal","queryProposalById","waitBlocks"],"sources":["goods.ica.test.ts"],"sourcesContent":["import {\n  COSMOS_DENOM,\n  CosmosWrapper,\n  NEUTRON_DENOM,\n  WalletWrapper,\n} from '../../helpers/cosmos';\nimport { TestStateLocalCosmosTestNet } from '../common_localcosmosnet';\n\nimport { createProposal, registerICA, queryICA, queryCustodyFunds, queryProposalById } from '../../helpers/goods';\n\nimport { NeutronContract } from '../../helpers/types';\nimport { CodeId } from '../../types';\nimport { getWithAttempts } from '../../helpers/wait';\n\n\ndescribe('Neutron Hackaton Test', () => {\n    \n    let testState: TestStateLocalCosmosTestNet;\n    let neutronChain: CosmosWrapper;\n    let gaiaChain: CosmosWrapper;\n    let neutronAccount: WalletWrapper;\n    let gaiaAccount: WalletWrapper;\n\n    let accountAddress: string;\n    let contractAddress: string;\n    let icaAddress: string;\n\n    const connectionId = 'connection-0';\n\n    beforeAll(async () => {\n      testState = new TestStateLocalCosmosTestNet();\n      await testState.init();\n      neutronChain = new CosmosWrapper(\n        testState.sdk1,\n        testState.blockWaiter1,\n        NEUTRON_DENOM,\n      );\n      neutronAccount = new WalletWrapper(\n        neutronChain,\n        testState.wallets.qaNeutron.genQaWal1,\n      );\n      gaiaChain = new CosmosWrapper(\n        testState.sdk2,\n        testState.blockWaiter2,\n        COSMOS_DENOM,\n      );\n      gaiaAccount = new WalletWrapper(\n        gaiaChain,\n        testState.wallets.qaCosmos.genQaWal1,\n      );\n\n      accountAddress = neutronAccount.wallet.address.toString()\n    });\n\n\n    describe('deploying contract', () => {\n      let codeId: CodeId;\n      test('store contract', async () => {\n        codeId = await neutronAccount.storeWasm(\n          NeutronContract.GOODS,\n        );\n        expect(codeId).toBeGreaterThan(0);\n      });\n\n      test('instantiate contract', async () => {\n        contractAddress = (\n          await neutronAccount.instantiateContract(\n            codeId,\n            '{}',\n            'neutron_interchain_queries',\n          )\n        )[0]._contract_address;\n      });\n    });\n\n    describe('registering an interchain account', () => {\n      test('can register account', async () => {\n        await createProposal(neutronAccount, contractAddress)\n\n        const res = await registerICA(\n          neutronAccount,\n          contractAddress,\n          0,\n          connectionId\n        );\n\n        console.log(res);\n\n        expect(res.code).toBe(0);\n      });\n\n      test('if ICA accounts created', async () => {\n        const channels = await getWithAttempts(\n          neutronChain.blockWaiter,\n          () => neutronChain.listIBCChannels(),\n          async (channels) => channels.channels.length > 0,\n        );\n\n        const proposal_id = 0;\n        expect(Array.isArray(channels.channels)).toBe(true);\n        expect(channels.channels.length).toBeGreaterThan(1);\n        expect(channels.channels).toIncludeAllPartialMembers([\n          {\n            port_id: `icacontroller-${contractAddress}.${proposal_id}`,\n          },\n        ])\n      });\n\n\n      test('if can get the ICA address', async () => {\n        const ica = await queryICA(\n            neutronChain,\n            contractAddress,\n            0,\n            connectionId,\n            50,\n          );\n          expect(ica.interchain_account_address).toContain('cosmos');\n          expect(ica.interchain_account_address.length).toEqual(65);\n          icaAddress = ica.interchain_account_address;\n        }); \n      })\n\n      describe('funding a project from another chain', () => {\n\n        test('if can send funds to the ICA', async () => {\n          const res = await gaiaAccount.msgSend(\n            icaAddress,\n            {\n              amount: \"100000000\",\n              denom: COSMOS_DENOM\n            }\n          );\n          expect(res.code).toBe(0);\n        });\n\n        test('that contract havent seen the transfer yet', async () => {\n          const balance = await queryCustodyFunds(neutronChain, contractAddress, neutronAccount.wallet.address.toString());\n          expect(balance.length).toBe(0);\n\n          const proposal = await queryProposalById(neutronChain, contractAddress, 0)\n        });\n\n        test(\"that contract sees the transfer after a while\", async () => {\n\n          await neutronChain.blockWaiter.waitBlocks(90)\n          const proposal = await queryProposalById(neutronChain, contractAddress, 0)\n          console.log(\"pro:\", proposal)\n\n          const balance = await queryCustodyFunds(neutronChain, contractAddress, neutronAccount.wallet.address.toString());\n          console.log(\"bo:\", balance.length)\n          expect(balance.length).toBe(1);\n        })\n    });\n\n});\n\n/* const balance = await getWithAttempts(\n          neutronChain.blockWaiter,\n          () => queryCustodyFunds(neutronChain, contractAddress, neutronAccount.wallet.address.toString()),\n          async (balance) => balance.length > 0,\n        );\n        expect(balance.length).toBe(1);\n        expect(balance[0][1].amount).toBe(\"100000000\"); */\n\n"],"mappings":"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"}