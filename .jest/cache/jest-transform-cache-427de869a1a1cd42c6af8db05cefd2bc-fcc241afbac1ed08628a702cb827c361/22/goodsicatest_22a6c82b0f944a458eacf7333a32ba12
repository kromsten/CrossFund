961ba16daca8eaae9f8eb0a8761eec1e
"use strict";

var _cosmos = require("../../helpers/cosmos");
var _common_localcosmosnet = require("../common_localcosmosnet");
var _goods = require("../../helpers/goods");
var _types = require("../../helpers/types");
var _wait = require("../../helpers/wait");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
describe('Neutron Hackaton Test', () => {
  var testState;
  var neutronChain;
  var gaiaChain;
  var neutronAccount;
  var gaiaAccount;
  var accountAddress;
  var contractAddress;
  var icaAddress;
  var connectionId = 'connection-0';
  beforeAll( /*#__PURE__*/_asyncToGenerator(function* () {
    testState = new _common_localcosmosnet.TestStateLocalCosmosTestNet();
    yield testState.init();
    neutronChain = new _cosmos.CosmosWrapper(testState.sdk1, testState.blockWaiter1, _cosmos.NEUTRON_DENOM);
    neutronAccount = new _cosmos.WalletWrapper(neutronChain, testState.wallets.qaNeutron.genQaWal1);
    gaiaChain = new _cosmos.CosmosWrapper(testState.sdk2, testState.blockWaiter2, _cosmos.COSMOS_DENOM);
    gaiaAccount = new _cosmos.WalletWrapper(gaiaChain, testState.wallets.qaCosmos.genQaWal1);
    accountAddress = neutronAccount.wallet.address.toString();
  }));
  describe('deploying contract', () => {
    var codeId;
    test('store contract', /*#__PURE__*/_asyncToGenerator(function* () {
      codeId = yield neutronAccount.storeWasm(_types.NeutronContract.GOODS);
      expect(codeId).toBeGreaterThan(0);
    }));
    test('instantiate contract', /*#__PURE__*/_asyncToGenerator(function* () {
      contractAddress = (yield neutronAccount.instantiateContract(codeId, '{}', 'neutron_interchain_queries'))[0]._contract_address;
    }));
  });
  describe('registering an interchain account', () => {
    test('can register account', /*#__PURE__*/_asyncToGenerator(function* () {
      yield (0, _goods.createProposal)(neutronAccount, contractAddress);
      var res = yield (0, _goods.registerICA)(neutronAccount, contractAddress, 0, connectionId);
      console.log(res);
      expect(res.code).toBe(0);
    }));
    test('if ICA accounts created', /*#__PURE__*/_asyncToGenerator(function* () {
      var channels = yield (0, _wait.getWithAttempts)(neutronChain.blockWaiter, () => neutronChain.listIBCChannels(), /*#__PURE__*/function () {
        var _ref6 = _asyncToGenerator(function* (channels) {
          return channels.channels.length > 0;
        });
        return function (_x) {
          return _ref6.apply(this, arguments);
        };
      }());
      var proposal_id = 0;
      expect(Array.isArray(channels.channels)).toBe(true);
      expect(channels.channels.length).toBeGreaterThan(1);
      expect(channels.channels).toIncludeAllPartialMembers([{
        port_id: "icacontroller-".concat(contractAddress, ".").concat(proposal_id)
      }]);
    }));
    test('if can get the ICA address', /*#__PURE__*/_asyncToGenerator(function* () {
      var ica = yield (0, _goods.queryICA)(neutronChain, contractAddress, 0, connectionId, 50);
      expect(ica.interchain_account_address).toContain('cosmos');
      expect(ica.interchain_account_address.length).toEqual(65);
      icaAddress = ica.interchain_account_address;
    }));
  });
  describe('funding a project from another chain', () => {
    test('if can send funds to the ICA', /*#__PURE__*/_asyncToGenerator(function* () {
      var res = yield gaiaAccount.msgSend(icaAddress, {
        amount: "100000000",
        denom: _cosmos.COSMOS_DENOM
      });
      expect(res.code).toBe(0);
    }));
    test('that contract havent seen the transfer yet', /*#__PURE__*/_asyncToGenerator(function* () {
      var balance = yield (0, _goods.queryCustodyFunds)(neutronChain, contractAddress, neutronAccount.wallet.address.toString());
      expect(balance.length).toBe(0);
      var proposal = yield (0, _goods.queryProposalById)(neutronChain, contractAddress, 0);
    }));
    test("that contract sees the transfer after a while", /*#__PURE__*/_asyncToGenerator(function* () {
      yield neutronChain.blockWaiter.waitBlocks(90);
      var proposal = yield (0, _goods.queryProposalById)(neutronChain, contractAddress, 0);
      console.log("pro:", proposal);
      var balance = yield (0, _goods.queryCustodyFunds)(neutronChain, contractAddress, neutronAccount.wallet.address.toString());
      console.log("bo:", balance.length);
      expect(balance.length).toBe(1);
    }));
  });
});

/* const balance = await getWithAttempts(
          neutronChain.blockWaiter,
          () => queryCustodyFunds(neutronChain, contractAddress, neutronAccount.wallet.address.toString()),
          async (balance) => balance.length > 0,
        );
        expect(balance.length).toBe(1);
        expect(balance[0][1].amount).toBe("100000000"); */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,