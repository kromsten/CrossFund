966acbe326c9cc5e7d77570012880c19
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapMsg = exports.mnemonicToWallet = exports.getSequenceId = exports.getIBCDenom = exports.getEventAttributesFromTx = exports.getEventAttribute = exports.filterIBCDenoms = exports.createBankMessage = exports.WalletWrapper = exports.NEUTRON_DENOM = exports.IBC_USDC_DENOM = exports.IBC_RELAYER_NEUTRON_ADDRESS = exports.IBC_ATOM_DENOM = exports.CosmosWrapper = exports.COSMOS_DENOM = void 0;
var _core = require("@cosmos-client/core");
var _cosmwasm = require("@cosmos-client/cosmwasm");
var _proto = require("../generated/ibc/proto");
var _proto2 = require("../generated/proto");
var _axios = _interopRequireDefault(require("axios"));
var _types = require("../types");
var _long = _interopRequireDefault(require("long"));
var _wait = require("./wait");
var _proto3 = require("@cosmos-client/core/cjs/proto");
var _proto4 = require("@cosmos-client/ibc/cjs/proto");
var _crypto = _interopRequireDefault(require("crypto"));
var _env = require("./env");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var ICoin = _proto3.cosmos.base.v1beta1.ICoin;
var IHeight = _proto4.ibc.core.client.v1.IHeight;
var adminmodule = _proto.cosmos.adminmodule.adminmodule;
var NEUTRON_DENOM = process.env.NEUTRON_DENOM || 'untrn';
exports.NEUTRON_DENOM = NEUTRON_DENOM;
var IBC_ATOM_DENOM = process.env.IBC_ATOM_DENOM || 'uibcatom';
exports.IBC_ATOM_DENOM = IBC_ATOM_DENOM;
var IBC_USDC_DENOM = process.env.IBC_USDC_DENOM || 'uibcusdc';
exports.IBC_USDC_DENOM = IBC_USDC_DENOM;
var COSMOS_DENOM = process.env.COSMOS_DENOM || 'uatom';
exports.COSMOS_DENOM = COSMOS_DENOM;
var IBC_RELAYER_NEUTRON_ADDRESS = 'neutron1mjk79fjjgpplak5wq838w0yd982gzkyf8fxu8u';

// BalancesResponse is the response model for the bank balances query.

// DenomTraceResponse is the response model for the ibc transfer denom trace query.

// TotalBurnedNeutronsAmountResponse is the response model for the feeburner's total-burned-neutrons.
exports.IBC_RELAYER_NEUTRON_ADDRESS = IBC_RELAYER_NEUTRON_ADDRESS;
_core.cosmosclient.codec.register('/neutron.interchainqueries.MsgRemoveInterchainQueryRequest', _proto2.neutron.interchainqueries.MsgRemoveInterchainQueryRequest);
_core.cosmosclient.codec.register('/cosmos.params.v1beta1.ParameterChangeProposal', _core.proto.cosmos.params.v1beta1.ParameterChangeProposal);
_core.cosmosclient.codec.register('/neutron.interchainqueries.MsgRemoveInterchainQueryRequest', _proto2.neutron.interchainqueries.MsgRemoveInterchainQueryRequest);
_core.cosmosclient.codec.register('/cosmos.params.v1beta1.ParameterChangeProposal', _core.proto.cosmos.params.v1beta1.ParameterChangeProposal);
_core.cosmosclient.codec.register('/ibc.applications.transfer.v1.MsgTransfer', _proto.ibc.applications.transfer.v1.MsgTransfer);
_core.cosmosclient.codec.register('/cosmos.adminmodule.adminmodule.MsgSubmitProposal', adminmodule.MsgSubmitProposal);
_core.cosmosclient.codec.register('/ibc.lightclients.tendermint.v1.ClientState', _proto.ibc.lightclients.tendermint.v1.ClientState);
class CosmosWrapper {
  constructor(sdk, blockWaiter, denom) {
    this.denom = denom;
    this.sdk = sdk;
    this.blockWaiter = blockWaiter;
  }
  queryContractWithWait(contract, query) {
    var _arguments = arguments,
      _this = this;
    return _asyncToGenerator(function* () {
      var numAttempts = _arguments.length > 2 && _arguments[2] !== undefined ? _arguments[2] : 20;
      while (numAttempts > 0) {
        var res = yield _this.queryContract(contract, query).catch(() => null);
        if (res !== null) {
          return res;
        }
        numAttempts--;
        yield _this.blockWaiter.waitBlocks(1);
      }
      throw new Error('failed to query contract');
    })();
  }
  queryContract(contract, query) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      var url = "".concat(_this2.sdk.url, "/wasm/contract/").concat(contract, "/smart/").concat(Buffer.from(JSON.stringify(query)).toString('base64'), "?encoding=base64");
      var resp = yield _axios.default.get(url).catch(error => {
        if (error.response) {
          throw new Error("Status: ".concat(JSON.stringify(error.response.status), " \n") + "Response: ".concat(JSON.stringify(error.response.data), " \n") + "Headers: ".concat(JSON.stringify(error.response.headers)));
        } else if (error.request) {
          throw new Error(error.request);
        }
        throw new Error('Error: ' + error.message);
      });
      return JSON.parse(Buffer.from(resp.data.result.smart, 'base64').toString());
    })();
  }
  getContractInfo(contract) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      var url = "".concat(_this3.sdk.url, "/cosmwasm/wasm/v1/contract/").concat(contract, "?encoding=base64");
      try {
        var resp = yield _axios.default.get(url);
        return resp.data;
      } catch (e) {
        var _e$response;
        throw new Error((_e$response = e.response) === null || _e$response === void 0 || (_e$response = _e$response.data) === null || _e$response === void 0 ? void 0 : _e$response.message);
      }
    })();
  }
  getSeq(address) {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      var account = yield _core.rest.auth.account(_this4.sdk, address).then(res => _core.cosmosclient.codec.protoJSONToInstance(_core.cosmosclient.codec.castProtoJSONOfProtoAny(res.data.account))).catch(e => {
        console.log(e);
        throw e;
      });
      if (!(account instanceof _core.proto.cosmos.auth.v1beta1.BaseAccount)) {
        throw new Error("can't get account");
      }
      return account.sequence;
    })();
  }
  queryInterchainqueriesParams() {
    var _this5 = this;
    return _asyncToGenerator(function* () {
      var req = yield _axios.default.get("".concat(_this5.sdk.url, "/neutron/interchainqueries/params"));
      return req.data;
    })();
  }
  queryDelegations(delegatorAddr) {
    var _this6 = this;
    return _asyncToGenerator(function* () {
      var balances = yield _core.rest.staking.delegatorDelegations(_this6.sdk, delegatorAddr);
      return balances.data;
    })();
  }
  queryBalances(addr) {
    var _this7 = this;
    return _asyncToGenerator(function* () {
      var balances = yield _core.rest.bank.allBalances(_this7.sdk, addr);
      return balances.data;
    })();
  }
  queryDenomBalance(addr, denom) {
    var _this8 = this;
    return _asyncToGenerator(function* () {
      var _balance$amount;
      var {
        data
      } = yield _core.rest.bank.allBalances(_this8.sdk, addr.toString());
      var balance = data.balances.find(b => b.denom === denom);
      return parseInt((_balance$amount = balance === null || balance === void 0 ? void 0 : balance.amount) !== null && _balance$amount !== void 0 ? _balance$amount : '0', 10);
    })();
  }
  queryDenomTrace(ibcDenom) {
    var _this9 = this;
    return _asyncToGenerator(function* () {
      var data = _axios.default.get("".concat(_this9.sdk.url, "/ibc/apps/transfer/v1/denom_traces/").concat(ibcDenom));
      return data.then(res => res.data.denom_trace);
    })();
  }
  queryAckFailures(addr, pagination) {
    var _this10 = this;
    return _asyncToGenerator(function* () {
      try {
        var req = yield _axios.default.get("".concat(_this10.sdk.url, "/neutron/contractmanager/failures/").concat(addr), {
          params: pagination
        });
        return req.data;
      } catch (e) {
        var _e$response2;
        if (((_e$response2 = e.response) === null || _e$response2 === void 0 || (_e$response2 = _e$response2.data) === null || _e$response2 === void 0 ? void 0 : _e$response2.message) !== undefined) {
          var _e$response3;
          throw new Error((_e$response3 = e.response) === null || _e$response3 === void 0 || (_e$response3 = _e$response3.data) === null || _e$response3 === void 0 ? void 0 : _e$response3.message);
        }
        throw e;
      }
    })();
  }
  listIBCChannels() {
    var _this11 = this;
    return _asyncToGenerator(function* () {
      var res = yield _axios.default.get("".concat(_this11.sdk.url, "/ibc/core/channel/v1/channels"));
      return res.data;
    })();
  }
  queryTotalBurnedNeutronsAmount() {
    var _this12 = this;
    return _asyncToGenerator(function* () {
      try {
        var req = yield _axios.default.get("".concat(_this12.sdk.url, "/neutron/feeburner/total_burned_neutrons_amount"));
        return req.data;
      } catch (e) {
        var _e$response4;
        if (((_e$response4 = e.response) === null || _e$response4 === void 0 || (_e$response4 = _e$response4.data) === null || _e$response4 === void 0 ? void 0 : _e$response4.message) !== undefined) {
          var _e$response5;
          throw new Error((_e$response5 = e.response) === null || _e$response5 === void 0 || (_e$response5 = _e$response5.data) === null || _e$response5 === void 0 ? void 0 : _e$response5.message);
        }
        throw e;
      }
    })();
  }
  queryTotalSupplyByDenom(denom) {
    var _this13 = this;
    return _asyncToGenerator(function* () {
      try {
        var req = yield _axios.default.get("".concat(_this13.sdk.url, "/cosmos/bank/v1beta1/supply/").concat(denom));
        return req.data;
      } catch (e) {
        var _e$response6;
        if (((_e$response6 = e.response) === null || _e$response6 === void 0 || (_e$response6 = _e$response6.data) === null || _e$response6 === void 0 ? void 0 : _e$response6.message) !== undefined) {
          var _e$response7;
          throw new Error((_e$response7 = e.response) === null || _e$response7 === void 0 || (_e$response7 = _e$response7.data) === null || _e$response7 === void 0 ? void 0 : _e$response7.message);
        }
        throw e;
      }
    })();
  }
  getChainAdmins() {
    var _this14 = this;
    return _asyncToGenerator(function* () {
      var url = "".concat(_this14.sdk.url, "/cosmos/adminmodule/adminmodule/admins");
      var resp = yield _axios.default.get(url);
      return resp.data.admins;
    })();
  }
  queryPausedInfo(addr) {
    var _this15 = this;
    return _asyncToGenerator(function* () {
      return yield _this15.queryContract(addr, {
        pause_info: {}
      });
    })();
  }
  getWithAttempts(getFunc, readyFunc) {
    var _arguments2 = arguments,
      _this16 = this;
    return _asyncToGenerator(function* () {
      var numAttempts = _arguments2.length > 2 && _arguments2[2] !== undefined ? _arguments2[2] : 20;
      return yield (0, _wait.getWithAttempts)(_this16.blockWaiter, getFunc, readyFunc, numAttempts);
    })();
  }
  getCodeDataHash(codeId) {
    var _this17 = this;
    return _asyncToGenerator(function* () {
      try {
        var res = yield _axios.default.get("".concat(_this17.sdk.url, "/cosmwasm/wasm/v1/code/").concat(codeId));
        return res.data.code_info.data_hash;
      } catch (e) {
        var _e$response8;
        if (((_e$response8 = e.response) === null || _e$response8 === void 0 || (_e$response8 = _e$response8.data) === null || _e$response8 === void 0 ? void 0 : _e$response8.message) !== undefined) {
          var _e$response9;
          throw new Error((_e$response9 = e.response) === null || _e$response9 === void 0 || (_e$response9 = _e$response9.data) === null || _e$response9 === void 0 ? void 0 : _e$response9.message);
        }
        throw e;
      }
    })();
  }
  querySchedules(pagination) {
    var _this18 = this;
    return _asyncToGenerator(function* () {
      try {
        var req = yield _axios.default.get("".concat(_this18.sdk.url, "/neutron/cron/schedule"), {
          params: pagination
        });
        return req.data;
      } catch (e) {
        var _e$response10;
        if (((_e$response10 = e.response) === null || _e$response10 === void 0 || (_e$response10 = _e$response10.data) === null || _e$response10 === void 0 ? void 0 : _e$response10.message) !== undefined) {
          var _e$response11;
          throw new Error((_e$response11 = e.response) === null || _e$response11 === void 0 || (_e$response11 = _e$response11.data) === null || _e$response11 === void 0 ? void 0 : _e$response11.message);
        }
        throw e;
      }
    })();
  }
  queryCurrentUpgradePlan() {
    var _this19 = this;
    return _asyncToGenerator(function* () {
      try {
        var req = yield _axios.default.get("".concat(_this19.sdk.url, "/cosmos/upgrade/v1beta1/current_plan"), {});
        return req.data;
      } catch (e) {
        var _e$response12;
        if (((_e$response12 = e.response) === null || _e$response12 === void 0 || (_e$response12 = _e$response12.data) === null || _e$response12 === void 0 ? void 0 : _e$response12.message) !== undefined) {
          var _e$response13;
          throw new Error((_e$response13 = e.response) === null || _e$response13 === void 0 || (_e$response13 = _e$response13.data) === null || _e$response13 === void 0 ? void 0 : _e$response13.message);
        }
        throw e;
      }
    })();
  }
  queryPinnedCodes() {
    var _this20 = this;
    return _asyncToGenerator(function* () {
      try {
        var req = yield _axios.default.get("".concat(_this20.sdk.url, "/cosmwasm/wasm/v1/codes/pinned"), {});
        return req.data;
      } catch (e) {
        var _e$response14;
        if (((_e$response14 = e.response) === null || _e$response14 === void 0 || (_e$response14 = _e$response14.data) === null || _e$response14 === void 0 ? void 0 : _e$response14.message) !== undefined) {
          var _e$response15;
          throw new Error((_e$response15 = e.response) === null || _e$response15 === void 0 || (_e$response15 = _e$response15.data) === null || _e$response15 === void 0 ? void 0 : _e$response15.message);
        }
        throw e;
      }
    })();
  }
  queryHostEnabled() {
    var _this21 = this;
    return _asyncToGenerator(function* () {
      try {
        var req = yield _axios.default.get("".concat(_this21.sdk.url, "/ibc/apps/interchain_accounts/host/v1/params"), {});
        return req.data.params.host_enabled;
      } catch (e) {
        var _e$response16;
        if (((_e$response16 = e.response) === null || _e$response16 === void 0 || (_e$response16 = _e$response16.data) === null || _e$response16 === void 0 ? void 0 : _e$response16.message) !== undefined) {
          var _e$response17;
          throw new Error((_e$response17 = e.response) === null || _e$response17 === void 0 || (_e$response17 = _e$response17.data) === null || _e$response17 === void 0 ? void 0 : _e$response17.message);
        }
        throw e;
      }
    })();
  }
  queryMinGasPrices() {
    var _this22 = this;
    return _asyncToGenerator(function* () {
      try {
        var req = yield _axios.default.get("".concat(_this22.sdk.url, "/gaia/globalfee/v1beta1/minimum_gas_prices"), {});
        return req.data.minimum_gas_prices;
      } catch (e) {
        var _e$response18;
        if (((_e$response18 = e.response) === null || _e$response18 === void 0 || (_e$response18 = _e$response18.data) === null || _e$response18 === void 0 ? void 0 : _e$response18.message) !== undefined) {
          var _e$response19;
          throw new Error((_e$response19 = e.response) === null || _e$response19 === void 0 || (_e$response19 = _e$response19.data) === null || _e$response19 === void 0 ? void 0 : _e$response19.message);
        }
        throw e;
      }
    })();
  }
  queryContractAdmin(address) {
    var _this23 = this;
    return _asyncToGenerator(function* () {
      var resp = yield _this23.getContractInfo(address);
      return resp.contract_info.admin;
    })();
  }
}
exports.CosmosWrapper = CosmosWrapper;
class WalletWrapper {
  constructor(cw, wallet) {
    this.chain = cw;
    this.wallet = wallet;
  }
  queryBalances() {
    var _this24 = this;
    return _asyncToGenerator(function* () {
      return yield _this24.chain.queryBalances(_this24.wallet.address.toString());
    })();
  }
  queryDenomBalance(denom) {
    var _this25 = this;
    return _asyncToGenerator(function* () {
      return yield _this25.chain.queryDenomBalance(_this25.wallet.address.toString(), denom);
    })();
  }

  /**
   * execTx broadcasts messages and returns the transaction result.
   */
  execTx(fee, msgs) {
    var _arguments3 = arguments,
      _this26 = this;
    return _asyncToGenerator(function* () {
      var _res$data, _res$data3, _error;
      var numAttempts = _arguments3.length > 2 && _arguments3[2] !== undefined ? _arguments3[2] : 10;
      var mode = _arguments3.length > 3 && _arguments3[3] !== undefined ? _arguments3[3] : _core.rest.tx.BroadcastTxMode.Async;
      var sequence = _arguments3.length > 4 && _arguments3[4] !== undefined ? _arguments3[4] : _this26.wallet.account.sequence;
      var protoMsgs = [];
      msgs.forEach(msg => {
        protoMsgs.push(_core.cosmosclient.codec.instanceToProtoAny(msg));
      });
      var txBody = new _core.proto.cosmos.tx.v1beta1.TxBody({
        messages: protoMsgs
      });
      var authInfo = new _core.proto.cosmos.tx.v1beta1.AuthInfo({
        signer_infos: [{
          public_key: _core.cosmosclient.codec.instanceToProtoAny(_this26.wallet.pubKey),
          mode_info: {
            single: {
              mode: _core.proto.cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_DIRECT
            }
          },
          sequence
        }],
        fee
      });
      var txBuilder = new _core.cosmosclient.TxBuilder(_this26.chain.sdk, txBody, authInfo);
      var signDocBytes = txBuilder.signDocBytes(_this26.wallet.account.account_number);
      txBuilder.addSignature(_this26.wallet.privKey.sign(signDocBytes));
      var res = yield _core.rest.tx.broadcastTx(_this26.chain.sdk, {
        tx_bytes: txBuilder.txBytes(),
        mode
      });
      var code = (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.tx_response.code;
      if (code !== 0) {
        var _res$data2;
        throw new Error("broadcast error: ".concat((_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.tx_response.raw_log));
      }
      var txhash = (_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : _res$data3.tx_response.txhash;
      var error = null;
      while (numAttempts > 0) {
        yield _this26.chain.blockWaiter.waitBlocks(1);
        numAttempts--;
        var data = yield _core.rest.tx.getTx(_this26.chain.sdk, txhash).catch(reason => {
          error = reason;
          return null;
        });
        if (data != null) {
          _this26.wallet.account.sequence++;
          return data.data;
        }
      }
      error = (_error = error) !== null && _error !== void 0 ? _error : new Error('failed to submit tx');
      throw error;
    })();
  }

  // storeWasm stores the wasm code by the passed path on the blockchain.
  storeWasm(fileName) {
    var _this27 = this;
    return _asyncToGenerator(function* () {
      var msg = new _cosmwasm.cosmwasmproto.cosmwasm.wasm.v1.MsgStoreCode({
        sender: _this27.wallet.address.toString(),
        wasm_byte_code: yield (0, _env.getContractBinary)(fileName),
        instantiate_permission: null
      });
      var data = yield _this27.execTx({
        amount: [{
          denom: NEUTRON_DENOM,
          amount: '250000'
        }],
        gas_limit: _long.default.fromString('60000000')
      }, [msg]);
      if (data.tx_response.code !== 0) {
        throw new Error("upload error: ".concat(data.tx_response.raw_log));
      }
      var attributes = getEventAttributesFromTx(data, 'store_code', ['code_id']);
      return parseInt(attributes[0].code_id);
    })();
  }
  instantiateContract(codeId, msg, label) {
    var _arguments4 = arguments,
      _this28 = this;
    return _asyncToGenerator(function* () {
      var admin = _arguments4.length > 3 && _arguments4[3] !== undefined ? _arguments4[3] : _this28.wallet.address.toString();
      var msgInit = new _cosmwasm.cosmwasmproto.cosmwasm.wasm.v1.MsgInstantiateContract({
        code_id: codeId + '',
        sender: _this28.wallet.address.toString(),
        admin: admin,
        label,
        msg: Buffer.from(msg)
      });
      var data = yield _this28.execTx({
        amount: [{
          denom: NEUTRON_DENOM,
          amount: '2000000'
        }],
        gas_limit: _long.default.fromString('600000000')
      }, [msgInit], 10, _core.rest.tx.BroadcastTxMode.Block);
      if (data.tx_response.code !== 0) {
        throw new Error("instantiate error: ".concat(data.tx_response.raw_log));
      }
      return getEventAttributesFromTx(data, 'instantiate', ['_contract_address', 'code_id']);
    })();
  }
  executeContract(contract, msg) {
    var _arguments5 = arguments,
      _this29 = this;
    return _asyncToGenerator(function* () {
      var funds = _arguments5.length > 2 && _arguments5[2] !== undefined ? _arguments5[2] : [];
      var fee = _arguments5.length > 3 && _arguments5[3] !== undefined ? _arguments5[3] : {
        gas_limit: _long.default.fromString('4000000'),
        amount: [{
          denom: _this29.chain.denom,
          amount: '10000'
        }]
      };
      var sender = _this29.wallet.address.toString();
      var msgExecute = new _cosmwasm.cosmwasmproto.cosmwasm.wasm.v1.MsgExecuteContract({
        sender,
        contract,
        msg: Buffer.from(msg),
        funds
      });
      var res = yield _this29.execTx(fee, [msgExecute]);
      if (res.tx_response.code !== 0) {
        throw new Error("".concat(res.tx_response.raw_log, "\nFailed tx hash: ").concat(res.tx_response.txhash));
      }
      return res === null || res === void 0 ? void 0 : res.tx_response;
    })();
  }

  /**
   * msgSend processes a transfer, waits two blocks and returns the tx hash.
   */
  msgSend(to, coin) {
    var _arguments6 = arguments,
      _this30 = this;
    return _asyncToGenerator(function* () {
      var fee = _arguments6.length > 2 && _arguments6[2] !== undefined ? _arguments6[2] : {
        gas_limit: _long.default.fromString('200000'),
        amount: [{
          denom: _this30.chain.denom,
          amount: '1000'
        }]
      };
      var sequence = _arguments6.length > 3 && _arguments6[3] !== undefined ? _arguments6[3] : _this30.wallet.account.sequence;
      var mode = _arguments6.length > 4 && _arguments6[4] !== undefined ? _arguments6[4] : _core.rest.tx.BroadcastTxMode.Async;
      var {
        amount,
        denom = _this30.chain.denom
      } = typeof coin === 'string' ? {
        amount: coin
      } : coin;
      var msgSend = new _core.proto.cosmos.bank.v1beta1.MsgSend({
        from_address: _this30.wallet.address.toString(),
        to_address: to,
        amount: [{
          denom,
          amount
        }]
      });
      var res = yield _this30.execTx(fee, [msgSend], 10, mode, sequence);
      return res === null || res === void 0 ? void 0 : res.tx_response;
    })();
  }
  msgSendDirectProposal(subspace, key, value) {
    var _arguments7 = arguments,
      _this31 = this;
    return _asyncToGenerator(function* () {
      var fee = _arguments7.length > 3 && _arguments7[3] !== undefined ? _arguments7[3] : {
        gas_limit: _long.default.fromString('200000'),
        amount: [{
          denom: _this31.chain.denom,
          amount: '1000'
        }]
      };
      var sequence = _arguments7.length > 4 && _arguments7[4] !== undefined ? _arguments7[4] : _this31.wallet.account.sequence;
      var mode = _arguments7.length > 5 && _arguments7[5] !== undefined ? _arguments7[5] : _core.rest.tx.BroadcastTxMode.Async;
      var msg = new adminmodule.MsgSubmitProposal({
        content: _core.cosmosclient.codec.instanceToProtoAny(new _core.proto.cosmos.params.v1beta1.ParameterChangeProposal({
          title: 'mock',
          description: 'mock',
          changes: [new _core.proto.cosmos.params.v1beta1.ParamChange({
            key: key,
            subspace: subspace,
            value: value
          })]
        })),
        proposer: _this31.wallet.account.address
      });
      var res = yield _this31.execTx(fee, [msg], 10, mode, sequence);
      return res === null || res === void 0 ? void 0 : res.tx_response;
    })();
  }

  /**
   * Tests a pausable contract execution control.
   * @param testingContract is the contract the method tests;
   * @param execAction is an executable action to be called during a pause and after unpausing
   * as the main part of the test. Should return the execution response code;
   * @param actionCheck is called after unpausing to make sure the executable action worked.
   */
  testExecControl(testingContract, execAction, actionCheck) {
    var _this32 = this;
    return _asyncToGenerator(function* () {
      // check contract's pause info before pausing
      var pauseInfo = yield _this32.chain.queryPausedInfo(testingContract);
      expect(pauseInfo).toEqual({
        unpaused: {}
      });
      expect(pauseInfo.paused).toEqual(undefined);

      // pause contract
      var res = yield _this32.executeContract(testingContract, JSON.stringify({
        pause: {
          duration: 50
        }
      }));
      expect(res.code).toEqual(0);

      // check contract's pause info after pausing
      pauseInfo = yield _this32.chain.queryPausedInfo(testingContract);
      expect(pauseInfo.unpaused).toEqual(undefined);
      expect(pauseInfo.paused.until_height).toBeGreaterThan(0);

      // execute msgs on paused contract
      yield expect(execAction()).rejects.toThrow(/Contract execution is paused/);

      // unpause contract
      res = yield _this32.executeContract(testingContract, JSON.stringify({
        unpause: {}
      }));
      expect(res.code).toEqual(0);

      // check contract's pause info after unpausing
      pauseInfo = yield _this32.chain.queryPausedInfo(testingContract);
      expect(pauseInfo).toEqual({
        unpaused: {}
      });
      expect(pauseInfo.paused).toEqual(undefined);

      // execute msgs on unpaused contract
      var code = yield execAction();
      expect(code).toEqual(0);
      yield actionCheck();

      // pause contract again for a short period
      var shortPauseDuration = 5;
      res = yield _this32.executeContract(testingContract, JSON.stringify({
        pause: {
          duration: shortPauseDuration
        }
      }));
      expect(res.code).toEqual(0);

      // check contract's pause info after pausing
      pauseInfo = yield _this32.chain.queryPausedInfo(testingContract);
      expect(pauseInfo.unpaused).toEqual(undefined);
      expect(pauseInfo.paused.until_height).toBeGreaterThan(0);

      // wait and check contract's pause info after unpausing
      yield _this32.chain.blockWaiter.waitBlocks(shortPauseDuration);
      pauseInfo = yield _this32.chain.queryPausedInfo(testingContract);
      expect(pauseInfo).toEqual({
        unpaused: {}
      });
      expect(pauseInfo.paused).toEqual(undefined);
    })();
  }

  /* simulateFeeBurning simulates fee burning via send tx.
   */
  simulateFeeBurning(amount) {
    var _this33 = this;
    return _asyncToGenerator(function* () {
      var msgSend = new _core.proto.cosmos.bank.v1beta1.MsgSend({
        from_address: _this33.wallet.address.toString(),
        to_address: _this33.wallet.address.toString(),
        amount: [{
          denom: _this33.chain.denom,
          amount: '1'
        }]
      });
      var res = yield _this33.execTx({
        gas_limit: _long.default.fromString('200000'),
        amount: [{
          denom: _this33.chain.denom,
          amount: "".concat(Math.ceil(1000 * amount / 750))
        }]
      }, [msgSend]);
      return res === null || res === void 0 ? void 0 : res.tx_response;
    })();
  }

  /**
   * msgRemoveInterchainQuery sends transaction to remove interchain query, waits two blocks and returns the tx hash.
   */
  msgRemoveInterchainQuery(queryId, sender) {
    var _this34 = this;
    return _asyncToGenerator(function* () {
      var msgRemove = new _proto2.neutron.interchainqueries.MsgRemoveInterchainQueryRequest({
        query_id: queryId,
        sender
      });
      var res = yield _this34.execTx({
        gas_limit: _long.default.fromString('200000'),
        amount: [{
          denom: _this34.chain.denom,
          amount: '1000'
        }]
      }, [msgRemove]);
      return res === null || res === void 0 ? void 0 : res.tx_response;
    })();
  }

  /**
   * msgSend processes an IBC transfer, waits two blocks and returns the tx hash.
   */
  msgIBCTransfer(sourcePort, sourceChannel, token, receiver, timeoutHeight, memo) {
    var _this35 = this;
    return _asyncToGenerator(function* () {
      var msgSend = new _proto.ibc.applications.transfer.v1.MsgTransfer({
        source_port: sourcePort,
        source_channel: sourceChannel,
        token: token,
        sender: _this35.wallet.address.toString(),
        receiver: receiver,
        timeout_height: timeoutHeight,
        memo: memo
      });
      msgSend.memo = memo;
      var res = yield _this35.execTx({
        gas_limit: _long.default.fromString('200000'),
        amount: [{
          denom: _this35.chain.denom,
          amount: '1000'
        }]
      }, [msgSend]);
      return res === null || res === void 0 ? void 0 : res.tx_response;
    })();
  }
  msgDelegate(delegatorAddress, validatorAddress, amount) {
    var _this36 = this;
    return _asyncToGenerator(function* () {
      var msgDelegate = new _core.proto.cosmos.staking.v1beta1.MsgDelegate({
        delegator_address: delegatorAddress,
        validator_address: validatorAddress,
        amount: {
          denom: _this36.chain.denom,
          amount: amount
        }
      });
      var res = yield _this36.execTx({
        gas_limit: _long.default.fromString('200000'),
        amount: [{
          denom: _this36.chain.denom,
          amount: '1000'
        }]
      }, [msgDelegate]);
      return res === null || res === void 0 ? void 0 : res.tx_response;
    })();
  }
}
exports.WalletWrapper = WalletWrapper;
var getEventAttributesFromTx = (data, event, attributes) => {
  var events = JSON.parse(data === null || data === void 0 ? void 0 : data.tx_response.raw_log)[0].events || [];
  var resp = [];
  for (var e of events) {
    if (event === e.type) {
      var out = {};
      for (var a of e.attributes) {
        if (attributes.includes(a.key)) {
          out[a.key] = a.value;
        }
        if (Object.keys(out).length == attributes.length) {
          resp.push(out);
          out = {};
        }
      }
    }
  }
  return resp;
};
exports.getEventAttributesFromTx = getEventAttributesFromTx;
var mnemonicToWallet = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (walletType, sdk, mnemonic, addrPrefix) {
    var validate = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
    var privKey = new _core.proto.cosmos.crypto.secp256k1.PrivKey({
      key: yield _core.cosmosclient.generatePrivKeyFromMnemonic(mnemonic)
    });
    var pubKey = privKey.pubKey();
    var account = null;
    _core.cosmosclient.config.setBech32Prefix({
      accAddr: addrPrefix,
      accPub: "".concat(addrPrefix, "pub"),
      valAddr: "".concat(addrPrefix, "valoper"),
      valPub: "".concat(addrPrefix, "valoperpub"),
      consAddr: "".concat(addrPrefix, "valcons"),
      consPub: "".concat(addrPrefix, "valconspub")
    });
    var address = walletType.fromPublicKey(pubKey);
    // eslint-disable-next-line no-prototype-builtins
    if (_core.cosmosclient.ValAddress !== walletType && validate) {
      account = yield _core.rest.auth.account(sdk, address).then(res => _core.cosmosclient.codec.protoJSONToInstance(_core.cosmosclient.codec.castProtoJSONOfProtoAny(res.data.account))).catch(e => {
        console.log(e);
        throw e;
      });
      if (!(account instanceof _core.proto.cosmos.auth.v1beta1.BaseAccount)) {
        throw new Error("can't get account");
      }
    }
    return new _types.Wallet(address, account, pubKey, privKey, addrPrefix);
  });
  return function mnemonicToWallet(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();
exports.mnemonicToWallet = mnemonicToWallet;
var getSequenceId = rawLog => {
  if (!rawLog) {
    throw 'getSequenceId: empty rawLog';
  }
  var events = JSON.parse(rawLog)[0]['events'];
  var sequence = events.find(e => e['type'] === 'send_packet')['attributes'].find(a => a['key'] === 'packet_sequence').value;
  return +sequence;
};
exports.getSequenceId = getSequenceId;
var getIBCDenom = (portName, channelName, denom) => {
  var uatomIBCHash = _crypto.default.createHash('sha256').update("".concat(portName, "/").concat(channelName, "/").concat(denom)).digest('hex').toUpperCase();
  return "ibc/".concat(uatomIBCHash);
};
exports.getIBCDenom = getIBCDenom;
var createBankMessage = (addr, amount, denom) => ({
  bank: {
    send: {
      to_address: addr,
      amount: [{
        denom: denom,
        amount: amount.toString()
      }]
    }
  }
});
exports.createBankMessage = createBankMessage;
var getEventAttribute = (events, eventType, attribute) => {
  var _attributes$find;
  var attributes = events.filter(event => event.type === eventType).map(event => event.attributes).flat();
  var encodedAttr = attributes === null || attributes === void 0 || (_attributes$find = attributes.find(attr => attr.key === Buffer.from(attribute).toString('base64'))) === null || _attributes$find === void 0 ? void 0 : _attributes$find.value;
  expect(encodedAttr).toBeDefined();
  return Buffer.from(encodedAttr, 'base64').toString('ascii');
};
exports.getEventAttribute = getEventAttribute;
var filterIBCDenoms = list => list.filter(coin => coin.denom && ![IBC_ATOM_DENOM, IBC_USDC_DENOM].includes(coin.denom));
exports.filterIBCDenoms = filterIBCDenoms;
var wrapMsg = x => Buffer.from(JSON.stringify(x)).toString('base64');
exports.wrapMsg = wrapMsg;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,