af0ab4459135d6b164dcdc8ce42b7585
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vestingSchedulePoint = exports.vestingSchedule = exports.vestingAccount = exports.tokenInfo = exports.token = exports.nativeTokenInfo = exports.nativeToken = exports.NeutronContract = void 0;
// SingleChoiceProposal represents a single governance proposal item (partial object).

// PageRequest is the params of pagination for request

// AckFailuresResponse is the response model for the contractmanager failures.

// Failure represents a single contractmanager failure

// Schedule represents a single cron added schedule

// BalancesResponse is the response model for the bank balances query.

var NeutronContract = {
  GOODS: 'goods.wasm'
};

// https://github.com/cosmos/cosmos-sdk/blob/main/proto/cosmos/upgrade/v1beta1/query.proto#L53

// https://github.com/cosmos/cosmos-sdk/blob/main/proto/cosmos/upgrade/v1beta1/upgrade.proto#L14
exports.NeutronContract = NeutronContract;
var nativeToken = (denom, amount) => ({
  info: nativeTokenInfo(denom),
  amount: amount
});
exports.nativeToken = nativeToken;
var token = (contractAddr, amount) => ({
  info: tokenInfo(contractAddr),
  amount: amount
});
exports.token = token;
var nativeTokenInfo = denom => ({
  native_token: {
    denom: denom
  }
});
exports.nativeTokenInfo = nativeTokenInfo;
var tokenInfo = contractAddr => ({
  token: {
    contract_addr: contractAddr
  }
});
exports.tokenInfo = tokenInfo;
var vestingAccount = (addr, schedules) => ({
  address: addr,
  schedules: schedules
});
exports.vestingAccount = vestingAccount;
var vestingSchedule = (startPoint, endPoint) => ({
  start_point: startPoint,
  end_point: endPoint
});
exports.vestingSchedule = vestingSchedule;
var vestingSchedulePoint = (time, amount) => ({
  time: time,
  amount: amount
});
exports.vestingSchedulePoint = vestingSchedulePoint;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOZXV0cm9uQ29udHJhY3QiLCJHT09EUyIsImV4cG9ydHMiLCJuYXRpdmVUb2tlbiIsImRlbm9tIiwiYW1vdW50IiwiaW5mbyIsIm5hdGl2ZVRva2VuSW5mbyIsInRva2VuIiwiY29udHJhY3RBZGRyIiwidG9rZW5JbmZvIiwibmF0aXZlX3Rva2VuIiwiY29udHJhY3RfYWRkciIsInZlc3RpbmdBY2NvdW50IiwiYWRkciIsInNjaGVkdWxlcyIsImFkZHJlc3MiLCJ2ZXN0aW5nU2NoZWR1bGUiLCJzdGFydFBvaW50IiwiZW5kUG9pbnQiLCJzdGFydF9wb2ludCIsImVuZF9wb2ludCIsInZlc3RpbmdTY2hlZHVsZVBvaW50IiwidGltZSJdLCJzb3VyY2VzIjpbInR5cGVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvc21vcyB9IGZyb20gJ0Bjb3Ntb3MtY2xpZW50L2NvcmUvY2pzL3Byb3RvJztcblxuZXhwb3J0IHR5cGUgQWNrbm93bGVkZ2VtZW50UmVzdWx0ID1cbiAgfCB7IHN1Y2Nlc3M6IHN0cmluZ1tdIH1cbiAgfCB7IGVycm9yOiBzdHJpbmdbXSB9XG4gIHwgeyB0aW1lb3V0OiBzdHJpbmcgfTtcblxuZXhwb3J0IHR5cGUgQ2hhbm5lbHNMaXN0ID0ge1xuICBjaGFubmVsczoge1xuICAgIHN0YXRlOiBzdHJpbmc7XG4gICAgb3JkZXJpbmc6IHN0cmluZztcbiAgICBjb3VudGVycGFydHk6IHtcbiAgICAgIHBvcnRfaWQ6IHN0cmluZztcbiAgICAgIGNoYW5uZWxfaWQ6IHN0cmluZztcbiAgICB9O1xuICAgIGNvbm5lY3Rpb25faG9wczogc3RyaW5nW107XG4gICAgdmVyc2lvbjogc3RyaW5nO1xuICAgIHBvcnRfaWQ6IHN0cmluZztcbiAgICBjaGFubmVsX2lkOiBzdHJpbmc7XG4gIH1bXTtcbn07XG5cbi8vIFNpbmdsZUNob2ljZVByb3Bvc2FsIHJlcHJlc2VudHMgYSBzaW5nbGUgZ292ZXJuYW5jZSBwcm9wb3NhbCBpdGVtIChwYXJ0aWFsIG9iamVjdCkuXG5leHBvcnQgdHlwZSBTaW5nbGVDaG9pY2VQcm9wb3NhbCA9IHtcbiAgcmVhZG9ubHkgdGl0bGU6IHN0cmluZztcbiAgcmVhZG9ubHkgZGVzY3JpcHRpb246IHN0cmluZztcbiAgLy8vIFRoZSBhZGRyZXNzIHRoYXQgY3JlYXRlZCB0aGlzIHByb3Bvc2FsLlxuICByZWFkb25seSBwcm9wb3Nlcjogc3RyaW5nO1xuICAvLy8gVGhlIGJsb2NrIGhlaWdodCBhdCB3aGljaCB0aGlzIHByb3Bvc2FsIHdhcyBjcmVhdGVkLiBWb3RpbmdcbiAgLy8vIHBvd2VyIHF1ZXJpZXMgc2hvdWxkIHF1ZXJ5IGZvciB2b3RpbmcgcG93ZXIgYXQgdGhpcyBibG9ja1xuICAvLy8gaGVpZ2h0LlxuICByZWFkb25seSBzdGFydF9oZWlnaHQ6IG51bWJlcjtcbiAgLy8vIFRoZSB0aHJlc2hvbGQgYXQgd2hpY2ggdGhpcyBwcm9wb3NhbCB3aWxsIHBhc3MuXG4gIC8vLyBwcm9wb3NhbCdzIGNyZWF0aW9uLlxuICByZWFkb25seSB0b3RhbF9wb3dlcjogc3RyaW5nO1xuICByZWFkb25seSBwcm9wb3NhbDoge1xuICAgIHN0YXR1czpcbiAgICAgIHwgJ29wZW4nXG4gICAgICB8ICdyZWplY3RlZCdcbiAgICAgIHwgJ3Bhc3NlZCdcbiAgICAgIHwgJ2V4ZWN1dGVkJ1xuICAgICAgfCAnY2xvc2VkJ1xuICAgICAgfCAnZXhlY3V0aW9uX2ZhaWxlZCc7XG4gICAgcmVhZG9ubHkgdm90ZXM6IHtcbiAgICAgIHllczogc3RyaW5nO1xuICAgICAgbm86IHN0cmluZztcbiAgICAgIGFic3RhaW46IHN0cmluZztcbiAgICB9O1xuICB9O1xufTtcblxuZXhwb3J0IHR5cGUgVG90YWxQb3dlckF0SGVpZ2h0UmVzcG9uc2UgPSB7XG4gIHJlYWRvbmx5IGhlaWdodDogc3RyaW5nO1xuICByZWFkb25seSBwb3dlcjogbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgVm90aW5nUG93ZXJBdEhlaWdodFJlc3BvbnNlID0ge1xuICByZWFkb25seSBoZWlnaHQ6IHN0cmluZztcbiAgcmVhZG9ubHkgcG93ZXI6IG51bWJlcjtcbn07XG5cbi8vIFBhZ2VSZXF1ZXN0IGlzIHRoZSBwYXJhbXMgb2YgcGFnaW5hdGlvbiBmb3IgcmVxdWVzdFxuZXhwb3J0IHR5cGUgUGFnZVJlcXVlc3QgPSB7XG4gICdwYWdpbmF0aW9uLmtleSc/OiBzdHJpbmc7XG4gICdwYWdpbmF0aW9uLm9mZnNldCc/OiBzdHJpbmc7XG4gICdwYWdpbmF0aW9uLmxpbWl0Jz86IHN0cmluZztcbiAgJ3BhZ2luYXRpb24uY291bnRfdG90YWwnPzogYm9vbGVhbjtcbn07XG5cbi8vIEFja0ZhaWx1cmVzUmVzcG9uc2UgaXMgdGhlIHJlc3BvbnNlIG1vZGVsIGZvciB0aGUgY29udHJhY3RtYW5hZ2VyIGZhaWx1cmVzLlxuZXhwb3J0IHR5cGUgQWNrRmFpbHVyZXNSZXNwb25zZSA9IHtcbiAgZmFpbHVyZXM6IEZhaWx1cmVbXTtcbiAgcGFnaW5hdGlvbjoge1xuICAgIG5leHRfa2V5OiBzdHJpbmc7XG4gICAgdG90YWw6IHN0cmluZztcbiAgfTtcbn07XG5cbi8vIEZhaWx1cmUgcmVwcmVzZW50cyBhIHNpbmdsZSBjb250cmFjdG1hbmFnZXIgZmFpbHVyZVxudHlwZSBGYWlsdXJlID0ge1xuICBhZGRyZXNzOiBzdHJpbmc7XG4gIGlkOiBudW1iZXI7XG4gIGFja19pZDogbnVtYmVyO1xuICBhY2tfdHlwZTogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgU2NoZWR1bGVSZXNwb25zZSA9IHtcbiAgc2NoZWR1bGVzOiBTY2hlZHVsZVtdO1xuICBwYWdpbmF0aW9uOiB7XG4gICAgbmV4dF9rZXk6IHN0cmluZztcbiAgICB0b3RhbDogc3RyaW5nO1xuICB9O1xufTtcblxuLy8gU2NoZWR1bGUgcmVwcmVzZW50cyBhIHNpbmdsZSBjcm9uIGFkZGVkIHNjaGVkdWxlXG50eXBlIFNjaGVkdWxlID0ge1xuICBuYW1lOiBzdHJpbmc7XG4gIHBlcmlvZDogbnVtYmVyO1xuICBtc2dzOiBhbnlbXTtcbn07XG5cbi8vIEJhbGFuY2VzUmVzcG9uc2UgaXMgdGhlIHJlc3BvbnNlIG1vZGVsIGZvciB0aGUgYmFuayBiYWxhbmNlcyBxdWVyeS5cbmV4cG9ydCB0eXBlIFBhdXNlSW5mb1Jlc3BvbnNlID0ge1xuICBwYXVzZWQ6IHtcbiAgICB1bnRpbF9oZWlnaHQ6IG51bWJlcjtcbiAgfTtcbiAgdW5wYXVzZWQ6IFJlY29yZDxzdHJpbmcsIG5ldmVyPjtcbn07XG5cbmV4cG9ydCBjb25zdCBOZXV0cm9uQ29udHJhY3QgPSB7XG4gIEdPT0RTOiAnZ29vZHMud2FzbScsXG59O1xuXG5leHBvcnQgdHlwZSBNdWx0aUNob2ljZU9wdGlvbiA9IHtcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgbXNnczogYW55W107XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsvYmxvYi9tYWluL3Byb3RvL2Nvc21vcy91cGdyYWRlL3YxYmV0YTEvcXVlcnkucHJvdG8jTDUzXG5leHBvcnQgdHlwZSBDdXJyZW50UGxhblJlc3BvbnNlID0ge1xuICBwbGFuOiBQbGFuIHwgbnVsbDtcbn07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay9ibG9iL21haW4vcHJvdG8vY29zbW9zL3VwZ3JhZGUvdjFiZXRhMS91cGdyYWRlLnByb3RvI0wxNFxuZXhwb3J0IHR5cGUgUGxhbiA9IHtcbiAgbmFtZTogc3RyaW5nO1xuICBoZWlnaHQ6IHN0cmluZztcbiAgaW5mbzogc3RyaW5nO1xufTtcblxuZXhwb3J0IGNvbnN0IG5hdGl2ZVRva2VuID0gKGRlbm9tOiBzdHJpbmcsIGFtb3VudDogc3RyaW5nKTogQXNzZXQgPT4gKHtcbiAgaW5mbzogbmF0aXZlVG9rZW5JbmZvKGRlbm9tKSxcbiAgYW1vdW50OiBhbW91bnQsXG59KTtcblxuZXhwb3J0IGNvbnN0IHRva2VuID0gKGNvbnRyYWN0QWRkcjogc3RyaW5nLCBhbW91bnQ6IHN0cmluZyk6IEFzc2V0ID0+ICh7XG4gIGluZm86IHRva2VuSW5mbyhjb250cmFjdEFkZHIpLFxuICBhbW91bnQ6IGFtb3VudCxcbn0pO1xuXG5leHBvcnQgY29uc3QgbmF0aXZlVG9rZW5JbmZvID0gKGRlbm9tOiBzdHJpbmcpOiBOYXRpdmVUb2tlbiA9PiAoe1xuICBuYXRpdmVfdG9rZW46IHtcbiAgICBkZW5vbTogZGVub20sXG4gIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IHRva2VuSW5mbyA9IChjb250cmFjdEFkZHI6IHN0cmluZyk6IFRva2VuID0+ICh7XG4gIHRva2VuOiB7XG4gICAgY29udHJhY3RfYWRkcjogY29udHJhY3RBZGRyLFxuICB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCB2ZXN0aW5nQWNjb3VudCA9IChcbiAgYWRkcjogc3RyaW5nLFxuICBzY2hlZHVsZXM6IFZlc3RpbmdTY2hlZHVsZVtdLFxuKTogVmVzdGluZ0FjY291bnQgPT4gKHtcbiAgYWRkcmVzczogYWRkcixcbiAgc2NoZWR1bGVzOiBzY2hlZHVsZXMsXG59KTtcblxuZXhwb3J0IGNvbnN0IHZlc3RpbmdTY2hlZHVsZSA9IChcbiAgc3RhcnRQb2ludDogVmVzdGluZ1NjaGVkdWxlUG9pbnQsXG4gIGVuZFBvaW50PzogVmVzdGluZ1NjaGVkdWxlUG9pbnQsXG4pOiBWZXN0aW5nU2NoZWR1bGUgPT4gKHtcbiAgc3RhcnRfcG9pbnQ6IHN0YXJ0UG9pbnQsXG4gIGVuZF9wb2ludDogZW5kUG9pbnQsXG59KTtcblxuZXhwb3J0IGNvbnN0IHZlc3RpbmdTY2hlZHVsZVBvaW50ID0gKFxuICB0aW1lOiBudW1iZXIsXG4gIGFtb3VudDogc3RyaW5nLFxuKTogVmVzdGluZ1NjaGVkdWxlUG9pbnQgPT4gKHtcbiAgdGltZTogdGltZSxcbiAgYW1vdW50OiBhbW91bnQsXG59KTtcblxuZXhwb3J0IHR5cGUgUG9vbFN0YXR1cyA9IHtcbiAgYXNzZXRzOiBBc3NldFtdO1xuICB0b3RhbF9zaGFyZTogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgQXNzZXQgPSB7XG4gIGluZm86IFRva2VuIHwgTmF0aXZlVG9rZW47XG4gIGFtb3VudDogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgVG9rZW4gPSB7XG4gIHRva2VuOiB7XG4gICAgY29udHJhY3RfYWRkcjogc3RyaW5nO1xuICB9O1xufTtcblxuZXhwb3J0IHR5cGUgTmF0aXZlVG9rZW4gPSB7XG4gIG5hdGl2ZV90b2tlbjoge1xuICAgIGRlbm9tOiBzdHJpbmc7XG4gIH07XG59O1xuXG5leHBvcnQgdHlwZSBWZXN0aW5nQWNjb3VudCA9IHtcbiAgYWRkcmVzczogc3RyaW5nO1xuICBzY2hlZHVsZXM6IFZlc3RpbmdTY2hlZHVsZVtdO1xufTtcblxuZXhwb3J0IHR5cGUgVmVzdGluZ1NjaGVkdWxlID0ge1xuICBzdGFydF9wb2ludDogVmVzdGluZ1NjaGVkdWxlUG9pbnQ7XG4gIGVuZF9wb2ludDogVmVzdGluZ1NjaGVkdWxlUG9pbnQgfCB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgdHlwZSBWZXN0aW5nU2NoZWR1bGVQb2ludCA9IHtcbiAgdGltZTogbnVtYmVyO1xuICBhbW91bnQ6IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIFBpbm5lZENvZGVzUmVzcG9uc2UgPSB7XG4gIGNvZGVfaWRzOiBudW1iZXJbXTtcbn07XG5cbmV4cG9ydCB0eXBlIEljYUhvc3RQYXJhbXNSZXNwb25zZSA9IHtcbiAgcGFyYW1zOiB7XG4gICAgaG9zdF9lbmFibGVkOiBib29sZWFuO1xuICB9O1xufTtcblxuZXhwb3J0IHR5cGUgR2xvYmFsRmVlTWluR2FzUHJpY2VzID0ge1xuICBtaW5pbXVtX2dhc19wcmljZXM6IGNvc21vcy5iYXNlLnYxYmV0YTEuSUNvaW5bXTtcbn07XG5cbmV4cG9ydCB0eXBlIENvbnRyYWN0QWRtaW5SZXNwb25zZSA9IHtcbiAgY29udHJhY3RfaW5mbzoge1xuICAgIGFkbWluOiBzdHJpbmc7XG4gIH07XG59O1xuXG5cblxuXG5cbmV4cG9ydCB0eXBlIFByb3Bvc2FsSW5mbyA9IHtcbiAgaWQ6IG51bWJlcjtcbiAgdGl0bGU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgZnVuZGluZzogYW55W107XG4gIGFwcGxpY2F0aW9uczogW3N0cmluZywgQXBwbGljYXRpb25dW107XG59XG5cbmV4cG9ydCB0eXBlIEFsbFByb3Bvc2FsSW5mbyA9IHtcbiAgcHJvcG9zYWxzOiBQcm9wb3NhbEluZm9bXTtcbn1cblxuXG5leHBvcnQgdHlwZSBTaGFyZUhvbGRlciA9IHsgXG4gIHJlY2lwaWVudDogQWRkciwgXG4gIHBlcmNlbnRfc2hhcmU6IG51bWJlciBcbn1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuZXhwb3J0IHR5cGUgQWRkciA9IHN0cmluZztcbmV4cG9ydCB0eXBlIEV4cGlyYXRpb24gPSB7XG4gIGF0X2hlaWdodDogbnVtYmVyO1xufSB8IHtcbiAgYXRfdGltZTogVGltZXN0YW1wO1xufSB8IHtcbiAgbmV2ZXI6IHt9O1xufTtcbmV4cG9ydCB0eXBlIFRpbWVzdGFtcCA9IFVpbnQ2NDtcbmV4cG9ydCB0eXBlIFVpbnQ2NCA9IHN0cmluZztcbmV4cG9ydCBpbnRlcmZhY2UgQXBwbGljYXRpb24ge1xuICBhY2NlcHRlZDogYm9vbGVhbjtcbiAgYXBwbGljYW50czogR29vZEZlZVtdO1xuICBhdWRpdG9yczogR29vZEZlZVtdO1xuICBkZWxpdmVyX2J5OiBFeHBpcmF0aW9uO1xuICB2ZXJpZmljYXRpb25zOiBBZGRyW107XG59XG5leHBvcnQgaW50ZXJmYWNlIEdvb2RGZWUge1xuICBwZXJjZW50X3NoYXJlOiBudW1iZXI7XG4gIHJlY2lwaWVudDogQWRkcjtcbn1cbmV4cG9ydCB0eXBlIFVpbnQxMjggPSBzdHJpbmc7XG5leHBvcnQgaW50ZXJmYWNlIEN1c3RvZHlGdW5kcyB7XG4gIGFtb3VudDogVWludDEyODtcbiAgbG9ja2VkOiBib29sZWFuO1xuICBwcm9wb3NhbF9pZDogbnVtYmVyO1xuICByZW1vdGU/OiBzdHJpbmcgfCBudWxsO1xufVxuZXhwb3J0IHR5cGUgRXhlY3V0ZU1zZyA9IHtcbiAgc3VibWl0X3Byb3Bvc2FsOiB7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICB0aXRsZTogc3RyaW5nO1xuICB9O1xufSB8IHtcbiAgc3VibWl0X2FwcGxpY2F0aW9uOiB7XG4gICAgYXBwbGljYXRpb246IEFwcGxpY2F0aW9uU3VibWlzc2lvbjtcbiAgICBwcm9wb3NhbF9pZDogbnVtYmVyO1xuICB9O1xufSB8IHtcbiAgZnVuZF9wcm9wb3NhbDoge1xuICAgIGF1dG9fYWdyZWU/OiBib29sZWFuIHwgbnVsbDtcbiAgICBwcm9wb3NhbF9pZDogbnVtYmVyO1xuICB9O1xufSB8IHtcbiAgcmVnaXN0ZXJfaV9jX2E6IHtcbiAgICBjb25uZWN0aW9uX2lkOiBzdHJpbmc7XG4gICAgcHJvcG9zYWxfaWQ6IG51bWJlcjtcbiAgfTtcbn0gfCB7XG4gIGFwcHJvdmVfYXBwbGljYXRpb246IHtcbiAgICBhcHBsaWNhdGlvbl9zZW5kZXI6IEFkZHI7XG4gICAgcHJvcG9zYWxfaWQ6IG51bWJlcjtcbiAgfTtcbn0gfCB7XG4gIGFjY2VwdF9hcHBsaWNhdGlvbjoge1xuICAgIGFwcGxpY2F0aW9uX3NlbmRlcjogQWRkcjtcbiAgICBwcm9wb3NhbF9pZDogbnVtYmVyO1xuICB9O1xufSB8IHtcbiAgdmVyaWZ5X2FwcGxpY2F0aW9uOiB7XG4gICAgYXBwbGljYXRpb25fc2VuZGVyOiBBZGRyO1xuICAgIHByb3Bvc2FsX2lkOiBudW1iZXI7XG4gICAgc3RvcF9hdD86IG51bWJlciB8IG51bGw7XG4gIH07XG59O1xuZXhwb3J0IGludGVyZmFjZSBBcHBsaWNhdGlvblN1Ym1pc3Npb24ge1xuICBhcHBsaWNhbnRzOiBHb29kRmVlW107XG4gIGF1ZGl0b3JzOiBHb29kRmVlW107XG4gIGRlbGl2ZXJfYnk6IEV4cGlyYXRpb247XG59XG5leHBvcnQgaW50ZXJmYWNlIEluc3RhbnRpYXRlTXNnIHt9XG5leHBvcnQgaW50ZXJmYWNlIE1pZ3JhdGVNc2cge31cbmV4cG9ydCBpbnRlcmZhY2UgUXVlcnlJbnRlcmNoYWluQWNjb3VudEFkZHJlc3NSZXNwb25zZSB7XG4gIGludGVyY2hhaW5fYWNjb3VudF9hZGRyZXNzOiBzdHJpbmc7XG4gIFtrOiBzdHJpbmddOiB1bmtub3duO1xufVxuZXhwb3J0IHR5cGUgUXVlcnlNc2cgPSB7XG4gIGFsbF9wcm9wb3NhbHM6IHt9O1xufSB8IHtcbiAgcHJvcG9zYWw6IHtcbiAgICBwcm9wb3NhbF9pZDogbnVtYmVyO1xuICB9O1xufSB8IHtcbiAgYWRkcmVzc19mdW5kczoge1xuICAgIGFkZHJlc3M6IEFkZHI7XG4gICAgc2tpcF9sb2NrZWQ/OiBib29sZWFuIHwgbnVsbDtcbiAgfTtcbn0gfCB7XG4gIGludGVyY2hhaW5fYWNjb3VudF9hZGRyZXNzOiB7XG4gICAgY29ubmVjdGlvbl9pZDogc3RyaW5nO1xuICAgIHByb3Bvc2FsX2lkOiBudW1iZXI7XG4gIH07XG59IHwge1xuICBpbnRlcmNoYWluX2FjY291bnRfYWRkcmVzc19mcm9tX2NvbnRyYWN0OiB7XG4gICAgcHJvcG9zYWxfaWQ6IG51bWJlcjtcbiAgfTtcbn0gfCB7XG4gIGFja25vd2xlZGdlbWVudF9yZXN1bHQ6IHtcbiAgICBwcm9wb3NhbF9pZDogbnVtYmVyO1xuICAgIHNlcXVlbmNlX2lkOiBudW1iZXI7XG4gIH07XG59IHwge1xuICBlcnJvcnNfcXVldWU6IHt9O1xufTtcbmV4cG9ydCB0eXBlIFN1ZG9Nc2cgPSB7XG4gIHJlc3BvbnNlOiB7XG4gICAgZGF0YTogQmluYXJ5O1xuICAgIHJlcXVlc3Q6IFJlcXVlc3RQYWNrZXQ7XG4gICAgW2s6IHN0cmluZ106IHVua25vd247XG4gIH07XG59IHwge1xuICBlcnJvcjoge1xuICAgIGRldGFpbHM6IHN0cmluZztcbiAgICByZXF1ZXN0OiBSZXF1ZXN0UGFja2V0O1xuICAgIFtrOiBzdHJpbmddOiB1bmtub3duO1xuICB9O1xufSB8IHtcbiAgdGltZW91dDoge1xuICAgIHJlcXVlc3Q6IFJlcXVlc3RQYWNrZXQ7XG4gICAgW2s6IHN0cmluZ106IHVua25vd247XG4gIH07XG59IHwge1xuICBvcGVuX2Fjazoge1xuICAgIGNoYW5uZWxfaWQ6IHN0cmluZztcbiAgICBjb3VudGVycGFydHlfY2hhbm5lbF9pZDogc3RyaW5nO1xuICAgIGNvdW50ZXJwYXJ0eV92ZXJzaW9uOiBzdHJpbmc7XG4gICAgcG9ydF9pZDogc3RyaW5nO1xuICAgIFtrOiBzdHJpbmddOiB1bmtub3duO1xuICB9O1xufSB8IHtcbiAgdHhfcXVlcnlfcmVzdWx0OiB7XG4gICAgZGF0YTogQmluYXJ5O1xuICAgIGhlaWdodDogSGVpZ2h0O1xuICAgIHF1ZXJ5X2lkOiBudW1iZXI7XG4gICAgW2s6IHN0cmluZ106IHVua25vd247XG4gIH07XG59IHwge1xuICBrdl9xdWVyeV9yZXN1bHQ6IHtcbiAgICBxdWVyeV9pZDogbnVtYmVyO1xuICAgIFtrOiBzdHJpbmddOiB1bmtub3duO1xuICB9O1xufTtcbmV4cG9ydCB0eXBlIEJpbmFyeSA9IHN0cmluZztcbmV4cG9ydCBpbnRlcmZhY2UgUmVxdWVzdFBhY2tldCB7XG4gIGRhdGE/OiBCaW5hcnkgfCBudWxsO1xuICBkZXN0aW5hdGlvbl9jaGFubmVsPzogc3RyaW5nIHwgbnVsbDtcbiAgZGVzdGluYXRpb25fcG9ydD86IHN0cmluZyB8IG51bGw7XG4gIHNlcXVlbmNlPzogbnVtYmVyIHwgbnVsbDtcbiAgc291cmNlX2NoYW5uZWw/OiBzdHJpbmcgfCBudWxsO1xuICBzb3VyY2VfcG9ydD86IHN0cmluZyB8IG51bGw7XG4gIHRpbWVvdXRfaGVpZ2h0PzogUmVxdWVzdFBhY2tldFRpbWVvdXRIZWlnaHQgfCBudWxsO1xuICB0aW1lb3V0X3RpbWVzdGFtcD86IG51bWJlciB8IG51bGw7XG4gIFtrOiBzdHJpbmddOiB1bmtub3duO1xufVxuZXhwb3J0IGludGVyZmFjZSBSZXF1ZXN0UGFja2V0VGltZW91dEhlaWdodCB7XG4gIHJldmlzaW9uX2hlaWdodD86IG51bWJlciB8IG51bGw7XG4gIHJldmlzaW9uX251bWJlcj86IG51bWJlciB8IG51bGw7XG4gIFtrOiBzdHJpbmddOiB1bmtub3duO1xufVxuZXhwb3J0IGludGVyZmFjZSBIZWlnaHQge1xuICByZXZpc2lvbl9oZWlnaHQ/OiBudW1iZXI7XG4gIHJldmlzaW9uX251bWJlcj86IG51bWJlcjtcbiAgW2s6IHN0cmluZ106IHVua25vd247XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFzQkE7O0FBdUNBOztBQVFBOztBQVNBOztBQWdCQTs7QUFPQTs7QUFRTyxJQUFNQSxlQUFlLEdBQUc7RUFDN0JDLEtBQUssRUFBRTtBQUNULENBQUM7O0FBT0Q7O0FBS0E7QUFBQUMsT0FBQSxDQUFBRixlQUFBLEdBQUFBLGVBQUE7QUFPTyxJQUFNRyxXQUFXLEdBQUdBLENBQUNDLEtBQWEsRUFBRUMsTUFBYyxNQUFhO0VBQ3BFQyxJQUFJLEVBQUVDLGVBQWUsQ0FBQ0gsS0FBSyxDQUFDO0VBQzVCQyxNQUFNLEVBQUVBO0FBQ1YsQ0FBQyxDQUFDO0FBQUNILE9BQUEsQ0FBQUMsV0FBQSxHQUFBQSxXQUFBO0FBRUksSUFBTUssS0FBSyxHQUFHQSxDQUFDQyxZQUFvQixFQUFFSixNQUFjLE1BQWE7RUFDckVDLElBQUksRUFBRUksU0FBUyxDQUFDRCxZQUFZLENBQUM7RUFDN0JKLE1BQU0sRUFBRUE7QUFDVixDQUFDLENBQUM7QUFBQ0gsT0FBQSxDQUFBTSxLQUFBLEdBQUFBLEtBQUE7QUFFSSxJQUFNRCxlQUFlLEdBQUlILEtBQWEsS0FBbUI7RUFDOURPLFlBQVksRUFBRTtJQUNaUCxLQUFLLEVBQUVBO0VBQ1Q7QUFDRixDQUFDLENBQUM7QUFBQ0YsT0FBQSxDQUFBSyxlQUFBLEdBQUFBLGVBQUE7QUFFSSxJQUFNRyxTQUFTLEdBQUlELFlBQW9CLEtBQWE7RUFDekRELEtBQUssRUFBRTtJQUNMSSxhQUFhLEVBQUVIO0VBQ2pCO0FBQ0YsQ0FBQyxDQUFDO0FBQUNQLE9BQUEsQ0FBQVEsU0FBQSxHQUFBQSxTQUFBO0FBRUksSUFBTUcsY0FBYyxHQUFHQSxDQUM1QkMsSUFBWSxFQUNaQyxTQUE0QixNQUNSO0VBQ3BCQyxPQUFPLEVBQUVGLElBQUk7RUFDYkMsU0FBUyxFQUFFQTtBQUNiLENBQUMsQ0FBQztBQUFDYixPQUFBLENBQUFXLGNBQUEsR0FBQUEsY0FBQTtBQUVJLElBQU1JLGVBQWUsR0FBR0EsQ0FDN0JDLFVBQWdDLEVBQ2hDQyxRQUErQixNQUNWO0VBQ3JCQyxXQUFXLEVBQUVGLFVBQVU7RUFDdkJHLFNBQVMsRUFBRUY7QUFDYixDQUFDLENBQUM7QUFBQ2pCLE9BQUEsQ0FBQWUsZUFBQSxHQUFBQSxlQUFBO0FBRUksSUFBTUssb0JBQW9CLEdBQUdBLENBQ2xDQyxJQUFZLEVBQ1psQixNQUFjLE1BQ1k7RUFDMUJrQixJQUFJLEVBQUVBLElBQUk7RUFDVmxCLE1BQU0sRUFBRUE7QUFDVixDQUFDLENBQUM7QUFBQ0gsT0FBQSxDQUFBb0Isb0JBQUEsR0FBQUEsb0JBQUEifQ==