{"version":3,"names":["NeutronContract","GOODS","exports","nativeToken","denom","amount","info","nativeTokenInfo","token","contractAddr","tokenInfo","native_token","contract_addr","vestingAccount","addr","schedules","address","vestingSchedule","startPoint","endPoint","start_point","end_point","vestingSchedulePoint","time"],"sources":["types.ts"],"sourcesContent":["import { cosmos } from '@cosmos-client/core/cjs/proto';\n\nexport type AcknowledgementResult =\n  | { success: string[] }\n  | { error: string[] }\n  | { timeout: string };\n\nexport type ChannelsList = {\n  channels: {\n    state: string;\n    ordering: string;\n    counterparty: {\n      port_id: string;\n      channel_id: string;\n    };\n    connection_hops: string[];\n    version: string;\n    port_id: string;\n    channel_id: string;\n  }[];\n};\n\n// SingleChoiceProposal represents a single governance proposal item (partial object).\nexport type SingleChoiceProposal = {\n  readonly title: string;\n  readonly description: string;\n  /// The address that created this proposal.\n  readonly proposer: string;\n  /// The block height at which this proposal was created. Voting\n  /// power queries should query for voting power at this block\n  /// height.\n  readonly start_height: number;\n  /// The threshold at which this proposal will pass.\n  /// proposal's creation.\n  readonly total_power: string;\n  readonly proposal: {\n    status:\n      | 'open'\n      | 'rejected'\n      | 'passed'\n      | 'executed'\n      | 'closed'\n      | 'execution_failed';\n    readonly votes: {\n      yes: string;\n      no: string;\n      abstain: string;\n    };\n  };\n};\n\nexport type TotalPowerAtHeightResponse = {\n  readonly height: string;\n  readonly power: number;\n};\n\nexport type VotingPowerAtHeightResponse = {\n  readonly height: string;\n  readonly power: number;\n};\n\n// PageRequest is the params of pagination for request\nexport type PageRequest = {\n  'pagination.key'?: string;\n  'pagination.offset'?: string;\n  'pagination.limit'?: string;\n  'pagination.count_total'?: boolean;\n};\n\n// AckFailuresResponse is the response model for the contractmanager failures.\nexport type AckFailuresResponse = {\n  failures: Failure[];\n  pagination: {\n    next_key: string;\n    total: string;\n  };\n};\n\n// Failure represents a single contractmanager failure\ntype Failure = {\n  address: string;\n  id: number;\n  ack_id: number;\n  ack_type: string;\n};\n\nexport type ScheduleResponse = {\n  schedules: Schedule[];\n  pagination: {\n    next_key: string;\n    total: string;\n  };\n};\n\n// Schedule represents a single cron added schedule\ntype Schedule = {\n  name: string;\n  period: number;\n  msgs: any[];\n};\n\n// BalancesResponse is the response model for the bank balances query.\nexport type PauseInfoResponse = {\n  paused: {\n    until_height: number;\n  };\n  unpaused: Record<string, never>;\n};\n\nexport const NeutronContract = {\n  GOODS: 'goods.wasm',\n};\n\nexport type MultiChoiceOption = {\n  description: string;\n  msgs: any[];\n};\n\n// https://github.com/cosmos/cosmos-sdk/blob/main/proto/cosmos/upgrade/v1beta1/query.proto#L53\nexport type CurrentPlanResponse = {\n  plan: Plan | null;\n};\n\n// https://github.com/cosmos/cosmos-sdk/blob/main/proto/cosmos/upgrade/v1beta1/upgrade.proto#L14\nexport type Plan = {\n  name: string;\n  height: string;\n  info: string;\n};\n\nexport const nativeToken = (denom: string, amount: string): Asset => ({\n  info: nativeTokenInfo(denom),\n  amount: amount,\n});\n\nexport const token = (contractAddr: string, amount: string): Asset => ({\n  info: tokenInfo(contractAddr),\n  amount: amount,\n});\n\nexport const nativeTokenInfo = (denom: string): NativeToken => ({\n  native_token: {\n    denom: denom,\n  },\n});\n\nexport const tokenInfo = (contractAddr: string): Token => ({\n  token: {\n    contract_addr: contractAddr,\n  },\n});\n\nexport const vestingAccount = (\n  addr: string,\n  schedules: VestingSchedule[],\n): VestingAccount => ({\n  address: addr,\n  schedules: schedules,\n});\n\nexport const vestingSchedule = (\n  startPoint: VestingSchedulePoint,\n  endPoint?: VestingSchedulePoint,\n): VestingSchedule => ({\n  start_point: startPoint,\n  end_point: endPoint,\n});\n\nexport const vestingSchedulePoint = (\n  time: number,\n  amount: string,\n): VestingSchedulePoint => ({\n  time: time,\n  amount: amount,\n});\n\nexport type PoolStatus = {\n  assets: Asset[];\n  total_share: string;\n};\n\nexport type Asset = {\n  info: Token | NativeToken;\n  amount: string;\n};\n\nexport type Token = {\n  token: {\n    contract_addr: string;\n  };\n};\n\nexport type NativeToken = {\n  native_token: {\n    denom: string;\n  };\n};\n\nexport type VestingAccount = {\n  address: string;\n  schedules: VestingSchedule[];\n};\n\nexport type VestingSchedule = {\n  start_point: VestingSchedulePoint;\n  end_point: VestingSchedulePoint | undefined;\n};\n\nexport type VestingSchedulePoint = {\n  time: number;\n  amount: string;\n};\n\nexport type PinnedCodesResponse = {\n  code_ids: number[];\n};\n\nexport type IcaHostParamsResponse = {\n  params: {\n    host_enabled: boolean;\n  };\n};\n\nexport type GlobalFeeMinGasPrices = {\n  minimum_gas_prices: cosmos.base.v1beta1.ICoin[];\n};\n\nexport type ContractAdminResponse = {\n  contract_info: {\n    admin: string;\n  };\n};\n\n\n\n\n\nexport type ProposalInfo = {\n  id: number;\n  title: string;\n  description: string;\n  funding: any[];\n  applications: [string, Application][];\n}\n\nexport type AllProposalInfo = {\n  proposals: ProposalInfo[];\n}\n\n\nexport type ShareHolder = { \n  recipient: Addr, \n  percent_share: number \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport type Addr = string;\nexport type Expiration = {\n  at_height: number;\n} | {\n  at_time: Timestamp;\n} | {\n  never: {};\n};\nexport type Timestamp = Uint64;\nexport type Uint64 = string;\nexport interface Application {\n  accepted: boolean;\n  applicants: GoodFee[];\n  auditors: GoodFee[];\n  deliver_by: Expiration;\n  verifications: Addr[];\n}\nexport interface GoodFee {\n  percent_share: number;\n  recipient: Addr;\n}\nexport type Uint128 = string;\nexport interface CustodyFunds {\n  amount: Uint128;\n  locked: boolean;\n  proposal_id: number;\n  remote?: string | null;\n}\nexport type ExecuteMsg = {\n  submit_proposal: {\n    description: string;\n    title: string;\n  };\n} | {\n  submit_application: {\n    application: ApplicationSubmission;\n    proposal_id: number;\n  };\n} | {\n  fund_proposal: {\n    auto_agree?: boolean | null;\n    proposal_id: number;\n  };\n} | {\n  register_i_c_a: {\n    connection_id: string;\n    proposal_id: number;\n  };\n} | {\n  approve_application: {\n    application_sender: Addr;\n    proposal_id: number;\n  };\n} | {\n  accept_application: {\n    application_sender: Addr;\n    proposal_id: number;\n  };\n} | {\n  verify_application: {\n    application_sender: Addr;\n    proposal_id: number;\n    stop_at?: number | null;\n  };\n};\nexport interface ApplicationSubmission {\n  applicants: GoodFee[];\n  auditors: GoodFee[];\n  deliver_by: Expiration;\n}\nexport interface InstantiateMsg {}\nexport interface MigrateMsg {}\nexport interface QueryInterchainAccountAddressResponse {\n  interchain_account_address: string;\n  [k: string]: unknown;\n}\nexport type QueryMsg = {\n  all_proposals: {};\n} | {\n  proposal: {\n    proposal_id: number;\n  };\n} | {\n  address_funds: {\n    address: Addr;\n    skip_locked?: boolean | null;\n  };\n} | {\n  interchain_account_address: {\n    connection_id: string;\n    proposal_id: number;\n  };\n} | {\n  interchain_account_address_from_contract: {\n    proposal_id: number;\n  };\n} | {\n  acknowledgement_result: {\n    proposal_id: number;\n    sequence_id: number;\n  };\n} | {\n  errors_queue: {};\n};\nexport type SudoMsg = {\n  response: {\n    data: Binary;\n    request: RequestPacket;\n    [k: string]: unknown;\n  };\n} | {\n  error: {\n    details: string;\n    request: RequestPacket;\n    [k: string]: unknown;\n  };\n} | {\n  timeout: {\n    request: RequestPacket;\n    [k: string]: unknown;\n  };\n} | {\n  open_ack: {\n    channel_id: string;\n    counterparty_channel_id: string;\n    counterparty_version: string;\n    port_id: string;\n    [k: string]: unknown;\n  };\n} | {\n  tx_query_result: {\n    data: Binary;\n    height: Height;\n    query_id: number;\n    [k: string]: unknown;\n  };\n} | {\n  kv_query_result: {\n    query_id: number;\n    [k: string]: unknown;\n  };\n};\nexport type Binary = string;\nexport interface RequestPacket {\n  data?: Binary | null;\n  destination_channel?: string | null;\n  destination_port?: string | null;\n  sequence?: number | null;\n  source_channel?: string | null;\n  source_port?: string | null;\n  timeout_height?: RequestPacketTimeoutHeight | null;\n  timeout_timestamp?: number | null;\n  [k: string]: unknown;\n}\nexport interface RequestPacketTimeoutHeight {\n  revision_height?: number | null;\n  revision_number?: number | null;\n  [k: string]: unknown;\n}\nexport interface Height {\n  revision_height?: number;\n  revision_number?: number;\n  [k: string]: unknown;\n}"],"mappings":";;;;;;AAsBA;;AAuCA;;AAQA;;AASA;;AAgBA;;AAOA;;AAQO,IAAMA,eAAe,GAAG;EAC7BC,KAAK,EAAE;AACT,CAAC;;AAOD;;AAKA;AAAAC,OAAA,CAAAF,eAAA,GAAAA,eAAA;AAOO,IAAMG,WAAW,GAAGA,CAACC,KAAa,EAAEC,MAAc,MAAa;EACpEC,IAAI,EAAEC,eAAe,CAACH,KAAK,CAAC;EAC5BC,MAAM,EAAEA;AACV,CAAC,CAAC;AAACH,OAAA,CAAAC,WAAA,GAAAA,WAAA;AAEI,IAAMK,KAAK,GAAGA,CAACC,YAAoB,EAAEJ,MAAc,MAAa;EACrEC,IAAI,EAAEI,SAAS,CAACD,YAAY,CAAC;EAC7BJ,MAAM,EAAEA;AACV,CAAC,CAAC;AAACH,OAAA,CAAAM,KAAA,GAAAA,KAAA;AAEI,IAAMD,eAAe,GAAIH,KAAa,KAAmB;EAC9DO,YAAY,EAAE;IACZP,KAAK,EAAEA;EACT;AACF,CAAC,CAAC;AAACF,OAAA,CAAAK,eAAA,GAAAA,eAAA;AAEI,IAAMG,SAAS,GAAID,YAAoB,KAAa;EACzDD,KAAK,EAAE;IACLI,aAAa,EAAEH;EACjB;AACF,CAAC,CAAC;AAACP,OAAA,CAAAQ,SAAA,GAAAA,SAAA;AAEI,IAAMG,cAAc,GAAGA,CAC5BC,IAAY,EACZC,SAA4B,MACR;EACpBC,OAAO,EAAEF,IAAI;EACbC,SAAS,EAAEA;AACb,CAAC,CAAC;AAACb,OAAA,CAAAW,cAAA,GAAAA,cAAA;AAEI,IAAMI,eAAe,GAAGA,CAC7BC,UAAgC,EAChCC,QAA+B,MACV;EACrBC,WAAW,EAAEF,UAAU;EACvBG,SAAS,EAAEF;AACb,CAAC,CAAC;AAACjB,OAAA,CAAAe,eAAA,GAAAA,eAAA;AAEI,IAAMK,oBAAoB,GAAGA,CAClCC,IAAY,EACZlB,MAAc,MACY;EAC1BkB,IAAI,EAAEA,IAAI;EACVlB,MAAM,EAAEA;AACV,CAAC,CAAC;AAACH,OAAA,CAAAoB,oBAAA,GAAAA,oBAAA"}